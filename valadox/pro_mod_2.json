{
	"Mod": {
		"name": "pro mod",
		"author": "DVR_YT",
		"description": "Thu, 30 Jan 2020 13:43:28 GMT",
		"titleLeft": "DVR_YT's",
		"titleRight": "Mod!",
		"subtitleLeft": "",
		"subtitleRight": ""
	},
	"Matchmaking": {
		"MaxBots": 1,
		"MaxPlayers": 100,
		"AllowBotTeams": true,
		"TeamsMinGames": 10000,
		"BotRating": 150,
		"OddPenalty": 0.175,
		"SmallPenalty": 0.15,
		"TeamPenaltyPower": 1
	},
	"World": {
		"SecondsToShrink": 982828727260
	},
	"Hero": {
		"Damping": 13,
		"MaxHealth": 700,
		"SeparationImpulsePerTick": 0.1
	},
	"ObstacleTemplates": {
		"mirror": {
			"health": 100000000000000
		}
	},
	"Spells": {
		"fireball": {
			"projectile": {
				"damage": 48
			}
		},
		"flamestrike": {
			"maxAngleDiffInRevs": 0.05,
			"projectile": {
				"density": 6,
				"speed": 0.2,
				"detonate": {
					"damage": 50,
					"renderTicks": 100
				},
				"partialDetonateRadius": {
					"ticks": 100
				},
				"partialDamage": {
					"initialMultiplier": 0.2
				},
				"renderers": [
					{
						"type": "bloom"
					},
					{
						"type": "reticule",
						"color": "rgba(128, 32, 0, 0.1)",
						"radius": 0.04,
						"minRadius": 0.036,
						"usePartialDamageMultiplier": true
					},
					{
						"type": "projectile",
						"ticks": 428,
						"smoke": 0.14,
						"fade": "#333"
					},
					{
						"type": "ray",
						"ticks": 181
					},
					{
						"type": "strike",
						"ticks": 118,
						"flash": true,
						"numParticles": 200
					}
				]
			}
		},
		"firespray": {
			"color": "#0ace00",
			"cooldown": 400,
			"throttle": false,
			"jitterRatio": 0.2,
			"projectile": {
				"ccd": true,
				"collideWith": 6535,
				"expireOn": 6519,
				"maxTicks": 128,
				"damage": 75,
				"color": "#0ace00",
				"renderers": [
					{
						"type": "bloom",
						"radius": 0.01
					},
					{
						"type": "projectile",
						"ticks": 150,
						"smoke": 0.15,
						"vanish": 0,
						"bloom": 0.01
					},
					{
						"type": "ray",
						"intermediatePoints": true,
						"ticks": 6,
						"vanish": 1
					},
					{
						"type": "strike",
						"ticks": 30,
						"flash": true,
						"numParticles": 14
					}
				]
			}
		},
		"triplet": {
			"numProjectilesPerTick": 1,
			"projectile": {
				"density": 0,
				"radius": 0.01,
				"maxTicks": 145,
				"damage": 40,
				"expireAgainstObjects": 755534,
				"renderers": [
					{
						"type": "bloom",
						"radius": 0.02
					},
					{
						"type": "projectile",
						"ticks": 15,
						"smoke": 0.05,
						"vanish": 1
					},
					{
						"type": "ray",
						"ticks": 5,
						"vanish": 0
					},
					{
						"type": "strike",
						"ticks": 30,
						"flash": true,
						"numParticles": 2
					}
				]
			}
		},
		"difire": {
			"numProjectilesPerTick": 8,
			"projectile": {
				"damage": 10,
				"expireAgainstObjects": 6534,
				"renderers": [
					{
						"type": "bloom",
						"radius": 0.02
					},
					{
						"type": "projectile",
						"ticks": 158,
						"smoke": 0.05,
						"vanish": 1
					},
					{
						"type": "ray",
						"ticks": 8,
						"vanish": 0
					},
					{
						"type": "strike",
						"ticks": 8,
						"flash": true,
						"numParticles": 22
					}
				],
				"buffs": [
					{
						"type": "burn",
						"collideWith": 91,
						"against": 12,
						"stack": "fire",
						"hitInterval": 20,
						"packet": {
							"damage": 0.8333333333333334,
							"lifeSteal": 0.3,
							"noHit": true
						},
						"maxTicks": 240,
						"resetOnGameStart": true,
						"render": {
							"color": "#ff0088",
							"alpha": 0.075,
							"ticks": 157,
							"emissionRadiusFactor": 1,
							"particleRadius": 0.00625,
							"shine": 0.2,
							"glow": 0.2
						}
					}
				]
			}
		},
		"meteor": {
			"color": "#00ff7f",
			"projectile": {
				"damage": 78,
				"color": "#00ff7f"
			}
		},
		"meteorite": {
			"color": "#ff9a00",
			"projectile": {
				"speed": 0.09,
				"damage": 150,
				"collideWith": 6519,
				"color": "#ff9a00",
				"renderers": [
					{
						"type": "bloom",
						"radius": 0.04
					},
					{
						"type": "projectile",
						"ticks": 123,
						"shine": 0,
						"smoke": 0.51,
						"fade": "#333"
					},
					{
						"type": "strike",
						"ticks": 12,
						"flash": true,
						"growth": 0.1
					}
				]
			}
		},
		"gravity": {
			"chargeTicks": 9,
			"projectile": {
				"speed": 0.4,
				"maxTicks": 400,
				"damage": 20,
				"gravity": {
					"power": 5,
					"render": {
						"shine": 7,
						"vanish": 0
					}
				},
				"buffs": [
					{
						"type": "cooldown",
						"against": 32,
						"maxTicks": 1,
						"minCooldown": 45
					},
					{
						"type": "cooldown",
						"against": 12,
						"owner": true,
						"maxTicks": 71,
						"adjustCooldown": -240,
						"notSpellIds": [
							"gravity"
						]
					}
				],
				"renderers": [
					{
						"type": "swirl",
						"color": "#0ace00",
						"radius": 0.02,
						"ticks": 159,
						"loopTicks": 20,
						"numParticles": 3,
						"particleRadius": 0.006666666666666667,
						"glow": 0.2,
						"shine": 0.4,
						"vanish": 0.5,
						"bloom": 0.4
					}
				]
			}
		},
		"whirlwind": {
			"maxAngleDiffInRevs": 0.1,
			"chargeTicks": 16,
			"projectile": {
				"maxTicks": 1200,
				"damage": 70,
				"hitInterval": 150,
				"behaviours": [
					{
						"type": "attract",
						"collideLike": 34,
						"categories": 2,
						"against": 12,
						"radius": 0.04,
						"accelerationPerTick": 0.1,
						"clampSpeed": 0.4
					}
				],
				"buffs": [
					{
						"type": "burn",
						"collideWith": 9,
						"against": 12,
						"stack": "fire",
						"hitInterval": 20,
						"packet": {
							"damage": 0.6666666666666666,
							"lifeSteal": 0.3,
							"noHit": true
						}
					}
				],
				"renderers": [
					{
						"type": "ray",
						"ticks": 5,
						"vanish": 0
					},
					{
						"type": "swirl",
						"color": "rgba(64, 255, 255, 0.25)",
						"radius": 0.01,
						"ticks": 20,
						"loopTicks": 183,
						"numParticles": 2,
						"particleRadius": 0.02,
						"shine": 0.2,
						"smoke": 1.3,
						"fade": "#144",
						"vanish": 1
					},
					{}
				]
			}
		},
		"kamehameha": {
			"color": "#ff0088",
			"maxAngleDiffInRevs": 0.01,
			"chargeTicks": 20,
			"revsPerTickWhileChannelling": 0.0005,
			"movementCancel": false,
			"projectile": {
				"speed": 5,
				"damage": 35,
				"color": "#ff0088"
			}
		},
		"lightning": {
			"color": "#eee",
			"projectile": {
				"speed": 38,
				"damage": 50,
				"color": "#eee"
			}
		},
		"blast": {
			"cooldown": 30,
			"chargeTicks": 1820,
			"strikeCancel": {
				"cooldownTicks": 3000
			},
			"chargeDamage": {
				"ticks": 10
			},
			"projectile": {
				"renderers": [
					{
						"type": "bloom",
						"selfColor": true,
						"radius": 0.07
					},
					{
						"type": "projectile",
						"ticks": 10,
						"selfColor": true,
						"shine": 1,
						"smoke": 0.5,
						"glow": 0.1,
						"vanish": 0
					},
					{
						"type": "strike",
						"ticks": 100,
						"numParticles": 100,
						"flash": true
					}
				]
			}
		},
		"homing": {
			"projectile": {
				"speed": 0.5,
				"maxTicks": 710,
				"damage": 86,
				"behaviours": [
					{
						"type": "homing",
						"revolutionsPerSecond": 8,
						"maxTurnProportion": 0.05
					}
				],
				"renderers": [
					{
						"type": "bloom"
					},
					{
						"type": "projectile",
						"ticks": 300,
						"smoke": 0.05,
						"vanish": 0.75
					},
					{
						"type": "ray",
						"ticks": 10,
						"vanish": 0.75
					},
					{
						"type": "strike",
						"ticks": 30,
						"growth": 1,
						"flash": true,
						"numParticles": 51
					}
				]
			}
		},
		"boomerang": {
			"maxAngleDiffInRevs": 0.1,
			"cooldown": 550,
			"projectile": {
				"radius": 0.03,
				"damage": 68,
				"expireOn": 0,
				"behaviours": [
					{
						"type": "homing",
						"revolutionsPerSecond": 1,
						"maxTurnProportion": 0.558,
						"minDistanceToTarget": 0.023,
						"targetType": "self"
					}
				],
				"renderers": [
					{
						"type": "bloom",
						"selfColor": true
					},
					{
						"type": "projectile",
						"selfColor": true,
						"ticks": 40,
						"vanish": 0
					},
					{
						"type": "ray",
						"selfColor": true,
						"ticks": 100,
						"vanish": 0
					},
					{
						"type": "ray",
						"selfColor": true,
						"radiusMultiplier": 0.25,
						"ticks": 6,
						"vanish": 0
					},
					{
						"type": "strike",
						"selfColor": true,
						"ticks": 55,
						"flash": true,
						"numParticles": 50
					}
				]
			}
		},
		"retractor": {
			"maxAngleDiffInRevs": 0.1,
			"releaseBehaviours": [
				{
					"type": "homing",
					"targetType": "cursor",
					"newSpeed": 0.1,
					"revolutionsPerSecond": 1,
					"redirect": true
				},
				{
					"type": "partial",
					"partialDamage": {
						"initialMultiplier": 0.5,
						"finalMultiplier": 1,
						"ticks": 6
					}
				}
			],
			"projectile": {
				"damage": 50,
				"radius": 0.035,
				"maxTicks": 500,
				"partialDamage": {
					"ticks": 2
				},
				"detonate": {
					"damage": 4
				},
				"renderers": [
					{
						"type": "bloom",
						"selfColor": true
					},
					{
						"type": "swirl",
						"color": "#00ff7f",
						"ticks": 300,
						"radius": 0.007,
						"particleRadius": 0.001,
						"glow": 0.05,
						"smoke": 0.3,
						"numParticles": 5,
						"loopTicks": 15,
						"vanish": 1,
						"selfColor": true
					},
					{
						"type": "projectile",
						"ticks": 1,
						"glow": 0.2,
						"selfColor": true
					},
					{
						"type": "ray",
						"ticks": 15,
						"glow": 0.2,
						"vanish": 0.25,
						"selfColor": true
					},
					{
						"type": "strike",
						"ticks": 15,
						"flash": true,
						"numParticles": 9,
						"selfColor": true
					}
				]
			}
		},
		"backlash": {
			"projectile": {
				"damage": 40,
				"behaviours": [
					{
						"trigger": {
							"afterTicks": 370
						},
						"type": "homing",
						"revolutionsPerSecond": 11,
						"targetType": "self"
					},
					{
						"trigger": {
							"afterTicks": 37
						},
						"type": "clearHits"
					}
				],
				"buffs": [
					{
						"type": "cooldown",
						"owner": true,
						"against": 14,
						"spellId": "backlash",
						"adjustCooldown": -45
					}
				],
				"renderers": [
					{
						"type": "bloom",
						"ownerColor": true
					},
					{
						"type": "polygon",
						"ownerColor": true,
						"numPoints": 3,
						"radiusMultiplier": 3,
						"revolutionInterval": 11,
						"ticks": 1
					},
					{
						"type": "ray",
						"ownerColor": false,
						"ticks": 25,
						"vanish": 0.5
					},
					{
						"type": "strike",
						"color": "#fff",
						"ticks": 25,
						"growth": 1.5,
						"flash": true,
						"speedMultiplier": -0.5,
						"detonate": 0.02
					}
				]
			}
		},
		"rocket": {
			"movementProportionWhileChannelling": 0.5,
			"projectile": {
				"damage": 50,
				"collideWith": 6553,
				"expireOn": 6519,
				"partialDetonateRadius": {
					"ticks": 600
				},
				"detonate": {
					"damage": 45,
					"buffs": [
						{
							"type": "movement",
							"maxTicks": 190,
							"movementProportion": 0.1,
							"render": {
								"color": "rgba(64, 255, 255, 1)",
								"alpha": 0.3,
								"ticks": 157,
								"emissionRadiusFactor": 1,
								"particleRadius": 0.01,
								"shine": 0.2,
								"glow": 0.2,
								"bloom": 0.3
							}
						}
					]
				},
				"partialBuffDuration": {
					"ticks": 160
				},
				"renderers": [
					{
						"type": "bloom",
						"ownerColor": true,
						"radius": 0.028
					},
					{
						"type": "reticule",
						"color": "rgba(255, 255, 255, 0.1)",
						"radius": 0.08,
						"minRadius": 0.024,
						"usePartialDamageMultiplier": true
					},
					{
						"type": "projectile",
						"ticks": 15,
						"glow": 0.2,
						"smoke": 0.8,
						"ownerColor": true
					},
					{
						"type": "strike",
						"ticks": 20,
						"flash": true,
						"ownerColor": true,
						"numParticles": 31
					}
				]
			}
		},
		"whip": {
			"maxAngleDiffInRevs": 1,
			"buffs": [
				{
					"type": "movement",
					"stack": "whip",
					"maxTicks": 200,
					"movementProportion": 1.1,
					"render": {
						"color": "#8800ff",
						"heroColor": true,
						"ticks": 300,
						"emissionRadiusFactor": 0,
						"particleRadius": 0.0125,
						"shine": 0.5,
						"glow": 0.2,
						"bloom": 0.03,
						"vanish": 0,
						"decay": true
					}
				}
			],
			"projectile": {
				"density": 3,
				"maxTicks": 10
			}
		},
		"repeater": {
			"cooldown": 200,
			"projectile": {
				"damage": 30,
				"collideWith": 63,
				"expireOn": 6519,
				"buffs": [
					{
						"type": "cooldown",
						"owner": true,
						"maxTicks": 4,
						"against": 4,
						"spellId": "repeater",
						"maxCooldown": 0,
						"sound": "repeater",
						"color": "#00ff00"
					},
					{
						"type": "armor",
						"maxTicks": 3000,
						"against": 4,
						"proportion": 0.5,
						"stack": "repeater",
						"source": "repeater",
						"maxStacks": 212,
						"resetOnGameStart": true,
						"render": {
							"color": "#0f0",
							"alpha": 0,
							"ticks": 11,
							"emissionRadiusFactor": 0,
							"particleRadius": 0,
							"shine": 0.12,
							"glow": 0.4,
							"bloom": 0.2,
							"bloomLow": 0.12,
							"decay": true
						}
					}
				],
				"renderers": [
					{
						"type": "bloom"
					},
					{
						"type": "projectile",
						"ticks": 128,
						"noPartialRadius": true
					},
					{
						"type": "ray",
						"intermediatePoints": true,
						"ticks": 121,
						"glow": 0.2,
						"radiusMultiplier": 0.25
					},
					{
						"type": "strike",
						"ticks": 18,
						"flash": true,
						"growth": 1,
						"numParticles": 50
					}
				]
			}
		},
		"drain": {
			"color": "#f80",
			"projectile": {
				"radius": 0.02,
				"behaviours": [
					{
						"type": "homing",
						"targetType": "enemy",
						"trigger": {
							"atCursor": true
						},
						"newSpeed": 0.5,
						"redirect": true
					}
				],
				"color": "#f80",
				"renderers": [
					{
						"type": "bloom"
					},
					{
						"type": "projectile",
						"ticks": 10
					},
					{
						"type": "ray",
						"ticks": 15,
						"vanish": 0
					},
					{
						"type": "ray",
						"intermediatePoints": true,
						"radiusMultiplier": 0.5,
						"ticks": 459,
						"vanish": 0
					},
					{
						"type": "strike",
						"ticks": 30,
						"growth": 1,
						"flash": true,
						"numParticles": 31
					}
				]
			}
		},
		"horcrux": {
			"maxAngleDiffInRevs": 0.1,
			"buffs": [
				{
					"type": "lifeSteal",
					"maxTicks": 220,
					"minHealth": 0
				}
			],
			"projectile": {
				"radius": 0.035,
				"speed": 0.5,
				"maxTicks": 280,
				"minTicks": 12,
				"behaviours": [
					{
						"type": "updateCollideWith",
						"trigger": {
							"afterTicks": 600,
							"atCursor": true
						},
						"collideWith": 6535
					},
					{
						"type": "homing",
						"targetType": "cursor",
						"trigger": {
							"afterTicks": 60,
							"atCursor": true
						},
						"newSpeed": 0,
						"redirect": true
					},
					{
						"type": "aura",
						"trigger": {
							"afterTicks": 60,
							"atCursor": true
						},
						"radius": 0.04,
						"tickInterval": 6,
						"maxHits": 10,
						"packet": {
							"damage": 21,
							"lifeSteal": 1,
							"minHealth": 1,
							"noHit": true,
							"noKnockback": true
						},
						"buffs": [
							{
								"type": "movement",
								"stack": "horcrux",
								"maxTicks": 100,
								"movementProportion": 1,
								"render": {
									"color": "#22ee88",
									"alpha": 0.3,
									"ticks": 105,
									"emissionRadiusFactor": 1,
									"particleRadius": 0.00625
								}
							}
						]
					}
				]
			}
		},
		"dualSaber": {
			"speedMultiplier": 3,
			"width": 0.01,
			"damageTemplate": {
				"damage": 10
			},
			"trailTicks": 9
		},
		"shield": {
			"minRadius": 0.15,
			"radius": 0.05
		},
		"supernova": {
			"color": "#00ccff",
			"projectile": {
				"damage": 60,
				"behaviours": [
					{
						"type": "homing",
						"targetType": "cursor",
						"trigger": {
							"atCursor": true
						},
						"newSpeed": 0,
						"redirect": true
					},
					{
						"type": "homing",
						"targetType": "cursor",
						"trigger": {
							"afterTicks": 28
						},
						"newSpeed": 0,
						"redirect": true
					}
				],
				"detonate": {
					"damage": 50,
					"radius": 0.1,
					"renderTicks": 70
				},
				"color": "#00ccff",
				"renderers": [
					{
						"type": "bloom",
						"radius": 0.02
					},
					{
						"type": "ray",
						"ticks": 30,
						"vanish": 1
					},
					{
						"type": "reticule",
						"color": "#00ccff",
						"minRadius": 0.049,
						"remainingTicks": 15,
						"shrinkTicks": 25,
						"radius": 0.02
					}
				]
			}
		},
		"halo": {
			"projectile": {
				"speed": 0.1,
				"damage": 21,
				"destructible": {
					"against": 129
				},
				"behaviours": [
					{
						"type": "strafe",
						"maxSpeed": 0
					},
					{
						"type": "homing",
						"revolutionsPerSecond": 1,
						"maxTurnProportion": 0.15,
						"minDistanceToTarget": 0.02,
						"targetType": "self"
					}
				],
				"renderers": [
					{
						"type": "bloom",
						"selfColor": true,
						"ownerColor": true,
						"radius": 0.02
					},
					{
						"type": "ray",
						"selfColor": true,
						"ownerColor": true,
						"ticks": 122,
						"glow": 0,
						"vanish": 1
					},
					{
						"type": "strike",
						"selfColor": true,
						"ownerColor": true,
						"ticks": 15,
						"growth": 1.1,
						"flash": true,
						"numParticles": 31
					}
				]
			}
		},
		"mines": {
			"projectile": {
				"density": 11,
				"ccd": true,
				"radius": 0.01,
				"damage": 69,
				"hitInterval": 300,
				"expireOn": 5519,
				"partialDamage": {
					"initialMultiplier": 0.01
				},
				"detonate": {
					"maxImpulse": 0.001
				},
				"behaviours": [
					{
						"type": "homing",
						"targetType": "cursor",
						"trigger": {
							"afterTicks": 10
						},
						"newSpeed": 0,
						"redirect": true
					},
					{
						"type": "expireOnOwnerRetreat",
						"maxDistance": 0.01,
						"trigger": {
							"afterTicks": 60
						}
					}
				],
				"renderers": [
					{
						"type": "bloom",
						"selfColor": true,
						"radius": 0.015
					},
					{
						"type": "projectile",
						"ticks": 1,
						"selfColor": true,
						"shine": 0,
						"glow": 0.12,
						"noPartialRadius": true
					},
					{
						"type": "ray",
						"intermediatePoints": true,
						"ticks": 100,
						"selfColor": true,
						"noPartialRadius": true
					}
				]
			}
		},
		"iceBomb": {
			"lengthTicks": 6,
			"jitterRatio": 0.9,
			"projectile": {
				"maxTicks": 125,
				"minTicks": 10,
				"damage": 59,
				"behaviours": [
					{
						"type": "attract",
						"collideLike": 4,
						"categories": 14,
						"against": 129,
						"radius": 0.03,
						"accelerationPerTick": -0.01,
						"maxSpeed": 0.1
					}
				],
				"buffs": [
					{
						"type": "movement",
						"stack": "iceBomb",
						"maxStacks": 1,
						"movementProportion": 0.1,
						"maxTicks": 90,
						"against": 12,
						"render": {
							"color": "rgba(64, 255, 255, 1)",
							"alpha": 0.3,
							"ticks": 15,
							"emissionRadiusFactor": 1,
							"particleRadius": 0.01,
							"shine": 0.2,
							"glow": 0.2,
							"bloom": 0.3
						}
					},
					{
						"type": "armor",
						"stack": "frostsplatter",
						"maxTicks": 90,
						"maxStacks": 1,
						"proportion": 0.25,
						"against": 4
					}
				]
			}
		},
		"thrust": {
			"maxAngleDiffInRevs": 0.1,
			"cooldown": 60,
			"throttle": true,
			"damageTemplate": {
				"damage": 20
			},
			"speed": 1.1,
			"buffs": [
				{
					"type": "mass",
					"radius": 0.018750000000000003,
					"density": 1,
					"maxTicks": 16,
					"appendCollideWith": 16,
					"render": {
						"color": "#fff",
						"heroColor": true,
						"ticks": 18,
						"emissionRadiusFactor": 1,
						"particleRadius": 0.018750000000000003,
						"glow": 0.2,
						"shine": 1,
						"bloom": 0.07,
						"decay": true
					}
				}
			]
		},
		"blaze": {
			"range": 0.75,
			"speed": 0.2,
			"damageTemplate": {
				"damage": 62
			},
			"buffs": [
				{
					"type": "mass",
					"cleansable": false,
					"channelling": true,
					"maxTicks": 160,
					"radius": 0.005,
					"restrictCollideWith": 20,
					"appendCollideWith": 16,
					"sense": 3
				}
			],
			"projectile": {
				"damage": 15,
				"renderers": [
					{
						"type": "projectile",
						"ticks": 115,
						"radiusMultiplier": 0.2,
						"smoke": {
							"isotropicSpeed": 0.1
						},
						"vanish": 0,
						"ownerColor": true
					},
					{
						"type": "strike",
						"ticks": 300,
						"flash": true,
						"detonate": 0.02
					}
				]
			}
		},
		"swap": {
			"projectile": {
				"maxTicks": 415,
				"damage": 20,
				"detonate": {
					"damage": 20,
					"renderTicks": 185
				}
			}
		},
		"voidRush": {
			"buffs": [
				{
					"type": "movement",
					"movementProportion": 1.7,
					"maxTicks": 150
				},
				{
					"type": "lavaImmunity",
					"damageProportion": 0,
					"maxTicks": 150,
					"sound": "voidRush-lavaImmunity",
					"render": {
						"color": "#8800ff",
						"heroColor": true,
						"ticks": 60,
						"emissionRadiusFactor": 0,
						"particleRadius": 0.0125,
						"decay": true,
						"glow": 0.2,
						"shine": 0.5,
						"bloom": 0.3,
						"vanish": 0
					}
				}
			]
		},
		"armor": {
			"buffs": [
				{
					"type": "armor",
					"passive": true,
					"proportion": -0.105
				}
			]
		}
	},
	"Layouts": {
		"exit": {
			"obstacles": [
				{
					"type": "outward",
					"layoutRadius": 0.075,
					"extent": 0.75,
					"numObstacles": 3,
					"layoutAngleOffsetInRevs": 0,
					"angularWidthInRevs": 0.16667,
					"health": 200
				},
				{
					"type": "fast",
					"layoutRadius": 0.23,
					"extent": 0.002,
					"numObstacles": 3,
					"layoutAngleOffsetInRevs": 0.16666667,
					"angularWidthInRevs": 0.15
				},
				{
					"pattern": [
						1,
						1,
						1,
						0,
						0,
						0,
						0,
						0,
						1,
						1
					],
					"type": "explosive",
					"numObstacles": 30,
					"layoutRadius": 0.25,
					"layoutAngleOffsetInRevs": 0.16666667,
					"numPoints": 3,
					"extent": 0.005,
					"orientationAngleOffsetInRevs": 0
				}
			]
		},
		"mirrors": {
			"obstacles": [
				{
					"type": "mirror",
					"numObstacles": 30,
					"layoutRadius": 0.22,
					"layoutAngleOffsetInRevs": 0,
					"numPoints": 4,
					"extent": 0.005,
					"orientationAngleOffsetInRevs": 0,
					"angularWidthInRevs": 0.05
				}
			]
		},
		"map-k68bnxlm": {
			"color": "#1f2333",
			"background": "#151a20",
			"obstacles": [
				{
					"type": "outward",
					"layoutRadius": 0.075,
					"extent": 0.75,
					"numObstacles": 3,
					"layoutAngleOffsetInRevs": 0,
					"angularWidthInRevs": 0.16667,
					"health": 200
				},
				{
					"type": "fast",
					"layoutRadius": 0.23,
					"extent": 0.002,
					"numObstacles": 3,
					"layoutAngleOffsetInRevs": 0.16666667,
					"angularWidthInRevs": 0.15
				},
				{
					"pattern": [
						1,
						1,
						1,
						0,
						0,
						0,
						0,
						0,
						1,
						1
					],
					"type": "explosive",
					"numObstacles": 30,
					"layoutRadius": 0.25,
					"layoutAngleOffsetInRevs": 0.16666667,
					"numPoints": 3,
					"extent": 0.005,
					"orientationAngleOffsetInRevs": 0
				}
			],
			"numPoints": 0
		}
	},
	"Code": "var center = { x: 0.5, y: 0.5 };\n\nvar CloseEnoughDistance = 0.05;\nvar CloseEnoughRadians = 0.1 * Math.PI;\nvar MissRadius = 0.05;\nvar DodgeRadius = 0.15;\nvar SpellCastIntervalMilliseconds = 1000;\nvar SpellCastJitterMilliseconds = 500;\n\nvar TicksPerSecond = 60;\n\nvar DefaultReactionMilliseconds = 600;\nvar ReactionMillisecondsLookup = { // Change the reaction time on certain spells\n    retarget: 200,\n};\n\nvar alreadyChosenSpells = false;\nvar nextSpell = 0;\n\n// See ai.contracts.ts:\n// input is InputContract - contains information about the current state of the world\n// output is OutputContract - an action you want to take in response to the world \nfunction act(input) {\n    // Want the bot to do nothing? Uncomment the line below (remove the //):\n    // return null;\n\n    var state = input.state;\n    var heroId = input.heroId;\n    var hero = state.heroes[heroId];\n    var cooldowns = input.cooldowns;\n    var settings = input.settings;\n\n    var opponent = findOpponent(state.heroes, heroId);\n    if (!(hero && opponent)) {\n        // Either we're dead, or everyone else is, nothing to do\n        return null;\n    }\n    \n    var action = null;\n    if (state.started) {\n        action =\n            recovery(state, hero, cooldowns)\n            || dodge(state, hero, cooldowns)\n            || castSpell(state, hero, opponent, cooldowns, settings)\n            || focus(hero, opponent\n    } else {\n        action =\n            chooseSpells(settings)\n            || dodge(state, hero, cooldowns)\n            || move(state, hero)\n            || face(state, hero, opponent)\n    }\n\n    if (action) {\n        // Give the bot a reaction time otherwise it is OP\n        var reactionMilliseconds = ReactionMillisecondsLookup[action.spellId] || DefaultReactionMilliseconds;\n        action.delayMilliseconds = reactionMilliseconds;\n        return action;\n    } else {\n        return null;\n    }\n}\n\nfunction chooseSpells(settings) {\n    if (alreadyChosenSpells) {\n        return null;\n    }\n    alreadyChosenSpells = true;\n\n    var spells = randomSpells(settings);\n\n    // Want to test a particular spell? Uncomment and edit the lines below\n    // spells[\"e\"] = \"saber\";\n\n    return { spells };\n}\n\nfunction randomSpells(settings) {\n\tvar keyBindings = {};\n\tvar allOptions = settings.Choices.Options;\n\tfor (var btn in allOptions) { // One of the buttons, e.g. Q or R\n        var options = allOptions[btn];\n\n        var spellIds = [];\n        for (var i = 0; i < options.length; ++i) {\n            var row = options[i];\n            for (var j = 0; j < row.length; ++j) {\n                var spellId = row[j];\n                spellIds.push(spellId);\n            }\n        }\n\n\t\tif (spellIds.length > 1) {\n\t\t\tkeyBindings[btn] = spellIds[Math.floor(Math.random() * spellIds.length)];\n\t\t}\n\t}\n\treturn keyBindings;\n}\n\nfunction findOpponent(heroes, myHeroId) {\n    var myHero = heroes[myHeroId];\n    if (!myHero) {\n        return null;\n    }\n\n    var choice = null;\n    var mostHealth = 0;\n    for (var heroId in heroes) {\n        var hero = heroes[heroId];\n\n        if (!hero.isEnemy) { continue; }\n\n        // Uncomment the line below to only target humans\n        // if (hero.isBot) { continue; }\n\n        if (hero.health > mostHealth) {\n            // Target the enemy with the most health\n            mostHealth = hero.health;\n            choice = hero;\n        }\n    }\n    return choice;\n}\n\nfunction recovery(state, hero, cooldowns) {\n    if (hero.inside || state.radius <= 0) {\n        // No need to recover\n        return null;\n    }\n\n    var spellId = null;\n    if (cooldowns[\"teleport\"] === 0) {\n        spellId = \"teleport\";\n    } else if (cooldowns[\"thrust\"] === 0) {\n        spellId = \"thrust\";\n    } else if (cooldowns[\"swap\"] === 0) {\n        spellId = \"swap\";\n    } else if (cooldowns[\"voidRush\"] === 0) {\n        spellId = \"voidRush\";\n    } else if (cooldowns[\"vanish\"] === 0) {\n        spellId = \"vanish\";\n    } else {\n        spellId = \"move\";\n    }\n\n    if (spellId) {\n        return { spellId, target: center };\n    }\n    return null;\n}\n\nfunction deflect(state, hero, cooldowns, projectile) {\n    var target = vectorMidpoint(hero.pos, projectile.pos);\n    var spellId = null;\n    if (cooldowns[\"shield\"] === 0) {\n        spellId = \"shield\";\n    } else if (cooldowns[\"icewall\"] === 0) {\n        spellId = \"icewall\";\n    } else if (cooldowns[\"saber\"] === 0) {\n        spellId = \"saber\";\n    } else if (cooldowns[\"dualSaber\"] === 0) {\n        spellId = \"dualSaber\";\n    } else if (cooldowns[\"meteor\"] === 0) {\n        spellId = \"meteor\";\n    } else if (cooldowns[\"meteorite\"] === 0) {\n        spellId = \"meteorite\";\n    } else if (cooldowns[\"whirlwind\"] === 0) {\n        spellId = \"whirlwind\";\n    } else if (cooldowns[\"phaseOut\"] === 0) {\n        spellId = \"phaseOut\";\n    } else {\n        spellId = null;\n    }\n\n    if (spellId) {\n        return { spellId, target };\n    } else {\n        return null;\n    }\n}\n\nfunction castSpell(state, hero, opponent, cooldowns, settings) {\n    if (!readyForNextSpell(hero)) {\n        return null;\n    }\n\n    var candidates = [];\n    for (var spellId in cooldowns) {\n        var readyToCast = !cooldowns[spellId];\n        var spell = settings.Spells[spellId];\n\n        if (spell\n            && readyToCast\n            && validAttack(state, hero, opponent, spell)) {\n\n            candidates.push(spellId);\n        }\n    }\n\n    if (candidates.length > 0) {\n        var spellId = candidates[Math.floor(Math.random() * candidates.length)];\n        var action = { spellId, target: jitter(opponent.pos, MissRadius) };\n        if (action.spellId === spellId) {\n            updateNextSpellTime();\n        }\n        return action;\n    } else {\n        return null;\n    }\n}\n\nfunction validAttack(state, hero, opponent, spell) {\n    var opponentShielded = !!opponent.shieldTicksRemaining;\n\n    var distance = vectorDistance(hero.pos, opponent.pos);\n    if (spell.action === \"projectile\" || spell.action === \"spray\" || spell.action === \"retractor\" || spell.action === \"focus\" || spell.action === \"charge\") {\n        if (spell.projectile.swapWith) { // Swap doesn't work as an attack\n            return false;\n        }\n        if (opponentShielded && !spell.projectile.detonate) { // Detonate spells can penetrate shields, nothing else can\n            return false;\n        }\n        if (spell.id === \"whip\") {\n            // Just keep casting Electroshock even if out of range\n            return true;\n        }\n\n        var range = spell.projectile.speed * spell.projectile.maxTicks / TicksPerSecond + opponent.radius;\n        return distance <= range;\n    } else if (spell.action === \"scourge\") {\n        var range = spell.radius + opponent.radius;\n        return distance <= range;\n    } else if (spell.id === \"blaze\") {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction readyForNextSpell(hero) {\n    return (\n        Date.now() >= nextSpell // Don't cast too fast\n        || !!hero.link // If linked to something, cast as many spells as possible\n    );\n}\n\nfunction updateNextSpellTime() {\n    nextSpell = Date.now() + SpellCastIntervalMilliseconds + Math.floor((Math.random() < 0.5 ? -1 : 1) * Math.random() * SpellCastJitterMilliseconds);\n}\n\nfunction jitter(target, missRadius) {\n    var radius = Math.random() * missRadius;\n    var angle = Math.random() * 2 * Math.PI;\n    return {\n        x: target.x + radius * Math.cos(angle),\n        y: target.y + radius * Math.sin(angle),\n    };\n}\n\nfunction focus(hero, opponent) { // When using a spell (e.g. Acolyte Beam, Spirit Missile) - ensure we are focusing the enemy, otherwise we will miss\n    if (hero.casting) {\n        if (hero.casting.spellId === \"blast\" || hero.casting.spellId === \"retractor\" || hero.casting.spellId === \"rocket\") {\n            // Have to release or it won't fire\n            return { spellId: hero.casting.spellId, release: true, target: opponent.pos };\n        } else if (hero.casting.spellId === \"saber\" || hero.casting.spellId === \"dualSaber\") {\n            // Don't focus the lightsaber, just swish it around\n            return { spellId: \"retarget\", target: vectorPlus(hero.pos, vectorFromAngle(hero.heading + Math.PI / 2)) };\n        } else if (hero.casting.spellId === \"grapple\") {\n            // Throw away to the right (TODO: be smarter about this)\n            return { spellId: hero.casting.spellId, release: true, target: vectorPlus(hero.pos, vectorFromAngle(hero.heading + Math.PI / 2)) };\n        } else if (hero.casting.spellId === \"halo\") {\n            return { spellId: \"move\", target: opponent.pos };\n        } else {\n            return { spellId: \"retarget\", target: opponent.pos };\n        }\n    } else {\n        return null;\n    }\n}\n\nfunction chase(state, hero, cooldowns, opponent) {\n    if (\"whip\" in cooldowns) {\n        // Got to get within range when using Electroshock\n        var target = vectorMidpoint(hero.pos, opponent.pos);\n        return { spellId: \"move\", target };\n    } else {\n        return null;\n    }\n}\n\nfunction move(state, hero) {\n    var centroid = { x: 0, y: 0 };\n    var numOpponents = 0;\n    for (var heroId in state.heroes) {\n        if (heroId === hero.id) {\n            continue; // Ignore self\n        }\n\n        var opponent = state.heroes[heroId];\n        centroid.x += opponent.pos.x;\n        centroid.y += opponent.pos.y;\n\n        ++numOpponents;\n    }\n    centroid.x /= numOpponents;\n    centroid.y /= numOpponents;\n\n    if (!numOpponents) {\n        return;\n    }\n\n    var offset = vectorNegate(vectorDiff(centroid, center)); // Move to the opposite side of the arena\n    var targetDistance = state.radius * 0.33; // Closer to center than edge (for polygonal maps)\n    var target = vectorPlus(center, vectorRelengthen(offset, targetDistance));\n\n    var distanceToTarget = vectorDistance(hero.pos, target);\n    if (distanceToTarget <= CloseEnoughDistance) {\n        // Close enough - don't send any action so the game can sleep while waiting for players\n        return null;\n    }\n\n    return { spellId: \"move\", target };\n}\n\nfunction face(state, hero, opponent) {\n    var target = opponent.pos;\n    var targetAngle = vectorAngle(vectorDiff(opponent.pos, hero.pos));\n    var angleDelta = vectorAngleDelta(hero.heading, targetAngle);\n    if (Math.abs(angleDelta) <= CloseEnoughRadians) {\n        return null;\n    }\n\n    return { spellId: \"retarget\", target };\n}\n\nfunction dodge(state, hero, cooldowns) {\n    for (var projectileId in state.projectiles) {\n        var projectile = state.projectiles[projectileId];\n        if (projectile.ownerId === hero.id) {\n            // This is my own projectile\n            continue;\n        }\n\n        if (projectile.spellId === \"halo\") {\n            // Halo is never coming for us, it orbits around its owner\n            continue;\n        }\n\n        var diff = vectorDiff(hero.pos, projectile.pos);\n        var distancePerTimeStep = vectorDot(projectile.velocity, vectorUnit(diff));\n        if (distancePerTimeStep <= 0) {\n            // Not coming towards us\n            continue;\n        }\n\n        var timeToCollision = vectorLength(diff) / distancePerTimeStep;\n        if (timeToCollision <= 0 || timeToCollision >= 30) {\n            // Not coming towards us or too far away\n            continue;\n        }\n\n        var collisionPoint = vectorPlus(projectile.pos, vectorMultiply(projectile.velocity, timeToCollision));\n        var distanceToCollision = vectorDistance(collisionPoint, hero.pos);\n        var dodgeRadius = Math.max(DodgeRadius, projectile.radius) + hero.radius;\n        if (distanceToCollision > dodgeRadius) {\n            // Won't hit us\n            continue;\n        }\n\n        var deflectAction = deflect(state, hero, cooldowns, projectile);\n        if (deflectAction) {\n            return deflectAction;\n        }\n\n        // Run away from collision point\n        var direction = vectorUnit(vectorNegate(vectorDiff(collisionPoint, hero.pos)));\n        var step = vectorMultiply(direction, dodgeRadius);\n        var target = vectorPlus(hero.pos, step);\n        return { spellId: \"move\", target };\n    }\n    return null;\n}\n\nfunction vectorDiff(to, from) {\n    return { x: to.x - from.x, y: to.y - from.y };\n}\n\nfunction vectorLength(vector) {\n    return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n}\n\nfunction vectorDistance(from, to) {\n    return vectorLength(vectorDiff(from, to));\n}\n\nfunction vectorUnit(vec) {\n    var length = vectorLength(vec);\n    return length === 0 ? vec : vectorMultiply(vec, 1 / length);\n}\n\nfunction vectorPlus(from, offset) {\n    return { x: from.x + offset.x, y: from.y + offset.y };\n}\n\nfunction vectorMultiply(vec, multiplier) {\n    return { x: vec.x * multiplier, y: vec.y * multiplier };\n}\n\nfunction vectorRelengthen(vec, length) {\n    return vectorMultiply(vectorUnit(vec), length);\n}\n\nfunction vectorNegate(vec) {\n    return vectorMultiply(vec, -1);\n}\n\nfunction vectorDot(a, b) {\n    return (a.x * b.x) + (a.y * b.y);\n}\n\nfunction vectorMidpoint(a, b) {\n    var diff = vectorDiff(b, a);\n    return vectorPlus(a, vectorMultiply(diff, 0.5));\n}\n\nfunction vectorFromAngle(angle) {\n\treturn { x: Math.cos(angle), y: Math.sin(angle) };\n}\n\nfunction vectorAngle(vec) {\n    return Math.atan2(vec.y, vec.x);\n}\n\nfunction vectorAngleDelta(currentAngle, targetAngle) {\n\tvar delta = targetAngle - currentAngle;\n\twhile (delta > Math.PI) {\n\t\tdelta -= 2 * Math.PI;\n\t}\n\twhile (delta < -Math.PI) {\n\t\tdelta += 2 * Math.PI;\n\t}\n\treturn delta;\n}\n\n// See ai.contracts.ts: Must return a BotContract\nreturn { act };"
}
