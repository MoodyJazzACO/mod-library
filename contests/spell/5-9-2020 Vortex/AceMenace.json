{
	"Mod": {
		"name": "AceMenace's Gale Cage",
		"author": "AceMenace",
		"description": "Please do not reuse any mechanics found in this mod without getting my permission first. Feel free to ask me for that permission anytime via Discord.",
		"titleLeft": "AceMenace's",
		"titleRight": "Mod!",
		"subtitleLeft": "Gale Cage",
		"subtitleRight": "Concept!"
	},
	"Choices": {
		"Options": {
			"r": [
				[
					"empower"
				],
				[
					"supernova",
					"rocket",
					"vortex"
				],
				[
					"bouncer",
					"repeater"
				],
				[
					"kamehameha",
					"blast"
				]
			]
		}
	},
	"Spells": {
		"vortex": {
			"id": "vortex",
			"name": "Gale Cage",
			"description": "Send forth a powerful vortex in the direction of your cursor! Enemies caught in the vortex will be continuously knocked airborne. Enemies can escape the vortex through a simple movement trick. Does not affect projectiles nor obstacles.",
			"effects": [
				{
					"icon": "far fa-cloud-upload-alt",
					"title": "Airborne",
					"text": "Airborne enemies will spin uncontrollably, increasing the size their hitbox. Additionally, the spinning is too chaotic for them to focus and shoot spells, thus rendering them silent."
				},
				{
					"icon": "far fa-bolt",
					"title": "Recoil",
					"text": "The force of this spell will knock you back slightly."
				}
			],
			"action": "projectile",
			"color": "#00d6d6",
			"icon": "vortex",
			"sound": "whirlwind",
			"maxAngleDiffInRevs": 0.01,
			"cooldown": 300,
			"throttle": true,
			"recoil": 0.5,
			"chargeTicks": 12,
			"projectile": {
				"categories": 4,
				"ccd": false,
				"density": 0.0001,
				"radius": 0.0325,
				"speed": 0.18,
				"maxTicks": 180,
				"damage": 5,
				"collideWith": 1,
				"expireOn": 0,
				"swappable": false,
				"sensor": true,
				"noKnockback": true,
				"hitInterval": 15,
				"behaviours": [
					{
						"type": "attract",
						"collideLike": 1,
						"categories": 1,
						"against": 4,
						"radius": 0.04,
						"accelerationPerTick": 0.015,
						"clampSpeed": 0.4
					}
				],
				"buffs": [
					{
						"type": "cooldown",
						"against": 12,
						"maxTicks": 1,
						"minCooldown": 45
					},
					{
						"type": "mass",
						"against": 12,
						"maxTicks": 45,
						"radius": 0.0175,
						"render": {
							"color": "#ffffff",
							"ticks": 25,
							"emissionRadiusFactor": 0,
							"particleRadius": 0.0175,
							"glow": 0.2,
							"shine": 0.2,
							"bloom": 0.07,
							"light": null,
							"decay": true
						}
					}
				],
				"sound": "whirlwind",
				"color": "#4ff",
				"renderers": [
					{
						"type": "bloom",
						"radius": 0.05,
						"ownerColor": true
					},
					{
						"type": "swirl",
						"color": "rgba(255,255,255,0.2)",
						"radius": 0.0325,
						"ticks": 90,
						"loopTicks": 540,
						"numParticles": 8,
						"particleRadius": 0.008,
						"light": null,
						"glow": 0.4,
						"shine": 0.2,
						"smoke": 0.01,
						"fade": "rgba(68,255,255,0.25)",
						"vanish": 0.01
					},
					{
						"type": "strike",
						"ticks": 15,
						"flash": true,
						"growth": 0.1
					}
				]
			}
		}
	},
	"Icons": {
		"vortex": {
			"path": "M254.875 19.844c-1.324.008-2.646.032-3.97.062-80.788 1.83-158.746 44.508-202.06 119.53-66.005 114.324-26.792 260.78 87.53 326.783 113.07 65.28 257.552 27.596 324.563-83.845.176-.28.357-.56.53-.844.586-.948 1.16-1.904 1.72-2.874.016-.028.015-.065.03-.094.124-.214.223-.44.344-.656C527.237 266.72 491.675 125.454 384.5 57.28c-2.514-1.772-5.102-3.447-7.78-5.03-.333-.21-.658-.426-1-.625-.022-.012-.043-.02-.064-.03-3.28-1.893-6.628-3.617-10.03-5.157-.022-.01-.042-.022-.063-.032-35.29-18.215-73.225-26.79-110.688-26.562zm.03 18.593c8.52-.046 17.063.42 25.595 1.376-14.054 3.2-28.19 8.286-42.063 15.062-10.908 5.328-21.7 11.714-32.25 19.063-5.684-.47-11.313-.756-16.875-.844-6.752-.107-13.408.047-19.937.5-15.732 1.09-30.787 3.865-44.813 8.28 36.827-27.32 81.255-42.37 126.688-43.374 1.22-.027 2.436-.056 3.656-.063zm58.876 16c6.41-.043 12.687.44 18.814 1.438-13.077 7-27.032 18.002-41.78 32.313-1.414 1.37-2.826 2.787-4.252 4.218-17.287-6.485-34.585-11.345-51.593-14.562 3.887-2.212 7.78-4.28 11.686-6.188C268.2 61.133 289.68 55.304 310 54.53c1.27-.047 2.52-.084 3.78-.093zm46.69 11.907c1.348.024 2.54.2 3.592.5.732.41 1.46.83 2.188 1.25.693.4 1.375.812 2.063 1.22 3.107 3.064 5.642 9.087 6.343 19.374.816 11.973-1.102 28.56-5.844 48-9.69-7.032-19.94-13.67-30.687-19.875-10.81-6.24-21.755-11.79-32.75-16.688C319.85 86.282 333.245 76.285 344.03 71c5.586-2.736 10.168-4.122 13.845-4.53.92-.104 1.785-.14 2.594-.126zm33 24.594c17.128 20.884 27.14 49.38 29.436 82.468.3 4.334.472 8.748.5 13.22-11.328-13.157-24.222-25.744-38.53-37.5.522-1.94 1.053-3.854 1.53-5.75 5.03-19.976 7.555-37.59 7.063-52.44zm-210.22.812c-13.043 11.278-25.534 24.094-37.188 38.313-1.82-.49-3.62-.988-5.406-1.438-16.18-4.075-30.817-6.51-43.687-7.03-2.976-.122-5.85-.12-8.626-.032 20.87-17.052 49.306-27.024 82.312-29.313 4.132-.287 8.334-.46 12.594-.5zm28.125 1.47c19.78 2.192 40.388 6.858 61.125 14.03-10.127 11.24-20.47 23.885-30.813 37.656-10.784 1.26-21.106 3.994-30.78 8-15.75-6.685-30.92-12.403-45.22-17.03 14.302-16.54 29.73-30.864 45.688-42.657zm79.938 21.186c12.563 5.266 25.103 11.486 37.468 18.625 12.29 7.097 23.874 14.806 34.658 23-3.59 11.717-8.03 24.21-13.22 37.25-19.175-27.13-49.672-45.65-84.624-48.718 8.726-11.044 17.347-21.17 25.72-30.156zM433.5 128.094c33.04 44.775 47.975 100.707 41.656 156-3.193-14.28-8.333-28.622-15.22-42.72-5.262-10.775-11.545-21.443-18.78-31.874 1.08-12.782 1.213-25.29.375-37.375-1.07-15.44-3.76-30.233-8.03-44.03zM90.844 140.188c1.705-.017 3.498.014 5.344.093 10.482.45 23.215 2.406 37.5 5.876-6.985 9.65-13.61 19.84-19.782 30.53-6.24 10.81-11.792 21.76-16.687 32.75-13.74-14.396-23.65-27.734-28.907-38.467-5.04-10.29-5.5-17.162-3.75-21.282.17-.302.326-.606.5-.907.206-.356.414-.707.624-1.06 2.7-3.564 8.876-6.567 20.282-7.345 1.55-.106 3.168-.17 4.874-.188zM153 151.5c11.53 3.52 23.83 7.868 36.656 12.938-27.28 18.723-46.158 48.766-49.844 83.375-10.337-8.24-19.826-16.396-28.312-24.313 5.26-12.565 11.454-25.103 18.594-37.47 7.068-12.24 14.75-23.78 22.906-34.53zm226.063 17.25c16.602 14.382 30.97 29.898 42.78 45.938-2.23 19.72-6.927 40.244-14.093 60.906-11.137-10.046-23.654-20.298-37.28-30.563-1.422-10.85-4.33-21.243-8.533-30.936 6.724-15.785 12.468-31.004 17.125-45.344zM53.156 182.344c7 13.098 18.01 27.102 32.344 41.875 1.3 1.34 2.644 2.678 4 4.03-6.49 17.306-11.343 34.627-14.563 51.656-2.15-3.795-4.17-7.595-6.03-11.406-14.56-29.81-20.148-59.498-15.75-86.156zm-16.28 51.53c3.193 14.306 8.318 28.688 15.218 42.814 5.29 10.832 11.62 21.548 18.906 32.03-1.03 12.555-1.136 24.84-.313 36.72 1.108 15.97 3.938 31.266 8.47 45.468-33.52-44.96-48.68-101.33-42.282-157.03zm400.312 4.376c2.13 3.763 4.123 7.534 5.968 11.313 14.527 29.74 20.122 59.358 15.78 85.968-7-13.083-17.992-27.053-32.31-41.81-1.307-1.347-2.64-2.706-4-4.064 6.48-17.214 11.322-34.46 14.562-51.406zm-332.844 4.063c10.607 9.567 22.465 19.317 35.344 29.093 1.185 12.435 4.33 24.303 9.125 35.28-6.202 14.807-11.542 29.093-15.907 42.595-16.518-14.31-30.823-29.754-42.594-45.717 2.184-19.824 6.852-40.464 14.032-61.25zm266.78 26.875c10.776 8.544 20.675 16.984 29.47 25.187-5.233 12.46-11.39 24.894-18.47 37.156-7.147 12.383-14.926 24.022-23.187 34.876-11.066-3.385-22.833-7.526-35.093-12.344 26.622-19.483 44.63-50.037 47.28-84.875zm43.75 39.25c13.757 14.41 23.676 27.79 28.938 38.53 5.13 10.473 5.488 17.38 3.625 21.47-.124.272-.263.533-.406.78-.01.02-.018.043-.03.063-.007.014-.024.02-.03.033-.05.085-.108.164-.158.25-.083.135-.156.274-.25.406-2.614 3.658-8.803 6.8-20.437 7.592-11.942.815-28.47-1.098-47.844-5.812 7.078-9.75 13.787-20.057 20.033-30.875 6.18-10.706 11.698-21.55 16.562-32.438zm-254.28 19.093c19.028 26.737 49.11 45.06 83.562 48.345-8.058 10.062-16.008 19.338-23.75 27.625-12.45-5.23-24.87-11.363-37.125-18.438-12.328-7.118-23.934-14.84-34.75-23.062 3.315-10.874 7.366-22.43 12.064-34.47zm-71.72 4.158c11.258 13.038 24.068 25.525 38.25 37.187-.477 1.78-.966 3.536-1.405 5.28-5.024 19.946-7.546 37.514-7.064 52.345-17.06-20.873-27.022-49.32-29.312-82.344-.284-4.09-.427-8.254-.47-12.47zM303.47 366c14.88 6.26 29.238 11.63 42.81 16.03-14.4 16.61-29.962 30.95-46.03 42.75-19.77-2.22-40.348-6.908-61.063-14.092 9.487-10.502 19.152-22.233 28.844-34.97 12.514-1.363 24.442-4.702 35.44-9.718zm-160.283 15.313c9.71 7.05 19.976 13.717 30.75 19.937 10.685 6.17 21.51 11.674 32.375 16.53-14.317 13.638-27.567 23.487-38.25 28.72-10.396 5.093-17.3 5.5-21.406 3.688-.03-.014-.064-.018-.094-.032-.24-.136-.48-.268-.718-.406-.272-.157-.543-.31-.813-.47-.034-.024-.057-.067-.093-.092-3.614-2.658-6.714-8.822-7.5-20.344-.81-11.877 1.09-28.294 5.75-47.53zm222.657 6.53c1.883.508 3.75 1.005 5.594 1.47 19.975 5.03 37.588 7.554 52.437 7.062-20.884 17.13-49.38 27.143-82.47 29.438-4.272.296-8.623.467-13.03.5 13.148-11.308 25.72-24.18 37.47-38.47zm-140.72 37.688c17.228 6.488 34.48 11.353 51.44 14.595-3.66 2.063-7.33 3.988-11.002 5.78-29.8 14.556-59.474 20.14-86.125 15.75 13.095-6.998 27.072-18.01 41.844-32.342 1.276-1.237 2.56-2.496 3.845-3.782zm162.282 10.72c-45.09 33.444-101.58 48.482-157.344 41.875 14.608-3.174 29.294-8.392 43.72-15.438 10.68-5.216 21.254-11.44 31.593-18.593 12.76 1.076 25.247 1.212 37.313.375 15.692-1.09 30.724-3.83 44.718-8.22z"
		}
	},
	"Code": "var center = { x: 0.5, y: 0.5 };\n\nvar CloseEnoughDistance = 0.05;\nvar CloseEnoughRadians = 0.1 * Math.PI;\nvar MissRadius = 0.05;\nvar DodgeRadius = 0.15;\nvar SpellCastIntervalMilliseconds = 1000;\nvar SpellCastJitterMilliseconds = 500;\n\nvar TicksPerSecond = 60;\n\nvar HardReactionMilliseconds = 600;\nvar EasyReactionMilliseconds = 3000;\nvar ReactionMillisecondsLookup = { // Change the reaction time on certain spells\n    retarget: 200,\n};\n\nvar alreadyChosenSpells = false;\nvar nextSpell = 0;\n\n// See ai.contracts.ts:\n// input is InputContract - contains information about the current state of the world\n// output is OutputContract - an action you want to take in response to the world \nfunction act(input) {\n    // Want the bot to do nothing? Uncomment the line below (remove the //):\n    // return null;\n\n    var state = input.state;\n    var heroId = input.heroId;\n    var hero = state.heroes[heroId];\n    var cooldowns = input.cooldowns;\n    var settings = input.settings;\n    var difficulty = input.difficulty;\n\n    var opponent = findOpponent(state.heroes, heroId);\n    if (!(hero && opponent)) {\n        // Either we're dead, or everyone else is, nothing to do\n        return null;\n    }\n    \n    var action = null;\n    if (state.started) {\n        action =\n            recovery(state, hero, cooldowns)\n            || dodge(state, hero, cooldowns)\n            || castSpell(state, hero, opponent, cooldowns, settings)\n            || focus(hero, opponent)\n            || chase(state, hero, cooldowns, opponent)\n            || move(state, hero)\n            || face(state, hero, opponent)\n    } else {\n        action =\n            chooseSpells(settings)\n            || dodge(state, hero, cooldowns)\n            || move(state, hero)\n            || face(state, hero, opponent)\n    }\n\n    if (action) {\n        // Give the bot a reaction time otherwise it is OP\n        var reactionMilliseconds = ReactionMillisecondsLookup[action.spellId] || defaultReactionMilliseconds(difficulty);\n        action.delayMilliseconds = reactionMilliseconds;\n        return action;\n    } else {\n        return null;\n    }\n}\n\nfunction defaultReactionMilliseconds(difficulty) {\n    var alpha = Math.sqrt(difficulty);\n    return alpha * HardReactionMilliseconds + (1 - alpha) * EasyReactionMilliseconds;\n}\n\nfunction chooseSpells(settings) {\n    if (alreadyChosenSpells) {\n        return null;\n    }\n    alreadyChosenSpells = true;\n\n    var spells = randomSpells(settings);\n\n    // Want to test a particular spell? Uncomment and edit the lines below\n     spells[\"r\"] = \"vortex\";\n\n    return { spells };\n}\n\nfunction randomSpells(settings) {\n\tvar keyBindings = {};\n\tvar allOptions = settings.Choices.Options;\n\tfor (var btn in allOptions) { // One of the buttons, e.g. Q or R\n        var options = allOptions[btn];\n\n        var spellIds = [];\n        for (var i = 0; i < options.length; ++i) {\n            var row = options[i];\n            for (var j = 0; j < row.length; ++j) {\n                var spellId = row[j];\n                spellIds.push(spellId);\n            }\n        }\n\n\t\tif (spellIds.length > 1) {\n\t\t\tkeyBindings[btn] = spellIds[Math.floor(Math.random() * spellIds.length)];\n\t\t}\n\t}\n\treturn keyBindings;\n}\n\nfunction findOpponent(heroes, myHeroId) {\n    var myHero = heroes[myHeroId];\n    if (!myHero) {\n        return null;\n    }\n\n    var choice = null;\n    var mostHealth = 0;\n    for (var heroId in heroes) {\n        var hero = heroes[heroId];\n\n        if (!hero.isEnemy) { continue; }\n\n        // Uncomment the line below to only target humans\n        // if (hero.isBot) { continue; }\n\n        if (hero.health > mostHealth) {\n            // Target the enemy with the most health\n            mostHealth = hero.health;\n            choice = hero;\n        }\n    }\n    return choice;\n}\n\nfunction recovery(state, hero, cooldowns) {\n    if (hero.inside || state.radius <= 0) {\n        // No need to recover\n        return null;\n    }\n\n    var spellId = null;\n    if (cooldowns[\"teleport\"] === 0) {\n        spellId = \"teleport\";\n    } else if (cooldowns[\"thrust\"] === 0) {\n        spellId = \"thrust\";\n    } else if (cooldowns[\"swap\"] === 0) {\n        spellId = \"swap\";\n    } else if (cooldowns[\"voidRush\"] === 0) {\n        spellId = \"voidRush\";\n    } else if (cooldowns[\"vanish\"] === 0) {\n        spellId = \"vanish\";\n    } else {\n        spellId = \"move\";\n    }\n\n    if (spellId) {\n        return { spellId, target: center };\n    }\n    return null;\n}\n\nfunction deflect(state, hero, cooldowns, projectile) {\n    var target = vectorMidpoint(hero.pos, projectile.pos);\n    var spellId = null;\n    if (cooldowns[\"shield\"] === 0) {\n        spellId = \"shield\";\n    } else if (cooldowns[\"icewall\"] === 0) {\n        spellId = \"icewall\";\n    } else if (cooldowns[\"saber\"] === 0) {\n        spellId = \"saber\";\n    } else if (cooldowns[\"dualSaber\"] === 0) {\n        spellId = \"dualSaber\";\n    } else if (cooldowns[\"meteor\"] === 0) {\n        spellId = \"meteor\";\n    } else if (cooldowns[\"meteorite\"] === 0) {\n        spellId = \"meteorite\";\n    } else if (cooldowns[\"whirlwind\"] === 0) {\n        spellId = \"whirlwind\";\n    } else if (cooldowns[\"phaseOut\"] === 0) {\n        spellId = \"phaseOut\";\n    } else {\n        spellId = null;\n    }\n\n    if (spellId) {\n        return { spellId, target };\n    } else {\n        return null;\n    }\n}\n\nfunction castSpell(state, hero, opponent, cooldowns, settings) {\n    if (!readyForNextSpell(hero)) {\n        return null;\n    }\n\n    var candidates = [];\n    for (var spellId in cooldowns) {\n        var readyToCast = !cooldowns[spellId];\n        var spell = settings.Spells[spellId];\n\n        if (spell\n            && readyToCast\n            && validAttack(state, hero, opponent, spell)) {\n\n            candidates.push(spellId);\n        }\n    }\n\n    if (candidates.length > 0) {\n        var spellId = candidates[Math.floor(Math.random() * candidates.length)];\n        var action = { spellId, target: jitter(opponent.pos, MissRadius) };\n        if (action.spellId === spellId) {\n            updateNextSpellTime();\n        }\n        return action;\n    } else {\n        return null;\n    }\n}\n\nfunction validAttack(state, hero, opponent, spell) {\n    var opponentShielded = !!opponent.shieldTicksRemaining;\n\n    var distance = vectorDistance(hero.pos, opponent.pos);\n    if (spell.action === \"projectile\" || spell.action === \"spray\" || spell.action === \"retractor\" || spell.action === \"focus\" || spell.action === \"charge\") {\n        if (spell.id === \"swap\") { // Swap doesn't work as an attack\n            return false;\n        }\n        if (opponentShielded && !spell.projectile.detonate) { // Detonate spells can penetrate shields, nothing else can\n            return false;\n        }\n        if (spell.id === \"whip\") {\n            // Just keep casting Electroshock even if out of range\n            return true;\n        }\n\n        var range = spell.projectile.speed * spell.projectile.maxTicks / TicksPerSecond + opponent.radius;\n        return distance <= range;\n    } else if (spell.action === \"scourge\") {\n        var range = spell.radius + opponent.radius;\n        return distance <= range;\n    } else if (spell.id === \"blaze\") {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction readyForNextSpell(hero) {\n    return (\n        Date.now() >= nextSpell // Don't cast too fast\n        || !!hero.link // If linked to something, cast as many spells as possible\n    );\n}\n\nfunction updateNextSpellTime() {\n    nextSpell = Date.now() + SpellCastIntervalMilliseconds + Math.floor((Math.random() < 0.5 ? -1 : 1) * Math.random() * SpellCastJitterMilliseconds);\n}\n\nfunction jitter(target, missRadius) {\n    var radius = Math.random() * missRadius;\n    var angle = Math.random() * 2 * Math.PI;\n    return {\n        x: target.x + radius * Math.cos(angle),\n        y: target.y + radius * Math.sin(angle),\n    };\n}\n\nfunction focus(hero, opponent) { // When using a spell (e.g. Acolyte Beam, Spirit Missile) - ensure we are focusing the enemy, otherwise we will miss\n    if (hero.casting) {\n        if (hero.casting.spellId === \"blast\" || hero.casting.spellId === \"retractor\" || hero.casting.spellId === \"rocket\") {\n            // Have to release or it won't fire\n            return { spellId: hero.casting.spellId, release: true, target: opponent.pos };\n        } else if (hero.casting.spellId === \"saber\" || hero.casting.spellId === \"dualSaber\") {\n            // Don't focus the lightsaber, just swish it around\n            return { spellId: \"retarget\", target: vectorPlus(hero.pos, vectorFromAngle(hero.heading + Math.PI / 2)) };\n        } else if (hero.casting.spellId === \"grapple\") {\n            // Throw away to the right (TODO: be smarter about this)\n            return { spellId: hero.casting.spellId, release: true, target: vectorPlus(hero.pos, vectorFromAngle(hero.heading + Math.PI / 2)) };\n        } else if (hero.casting.spellId === \"halo\") {\n            return { spellId: \"move\", target: opponent.pos };\n        } else {\n            return { spellId: \"retarget\", target: opponent.pos };\n        }\n    } else {\n        return null;\n    }\n}\n\nfunction chase(state, hero, cooldowns, opponent) {\n    if (\"whip\" in cooldowns) {\n        // Got to get within range when using Electroshock\n        var target = vectorMidpoint(hero.pos, opponent.pos);\n        return { spellId: \"move\", target };\n    } else {\n        return null;\n    }\n}\n\nfunction move(state, hero) {\n    var centroid = { x: 0, y: 0 };\n    var numOpponents = 0;\n    for (var heroId in state.heroes) {\n        if (heroId === hero.id) {\n            continue; // Ignore self\n        }\n\n        var opponent = state.heroes[heroId];\n        centroid.x += opponent.pos.x;\n        centroid.y += opponent.pos.y;\n\n        ++numOpponents;\n    }\n    centroid.x /= numOpponents;\n    centroid.y /= numOpponents;\n\n    if (!numOpponents) {\n        return;\n    }\n\n    var offset = vectorNegate(vectorDiff(centroid, center)); // Move to the opposite side of the arena\n    var targetDistance = state.radius * 0.33; // Closer to center than edge (for polygonal maps)\n    var target = vectorPlus(center, vectorRelengthen(offset, targetDistance));\n\n    var distanceToTarget = vectorDistance(hero.pos, target);\n    if (distanceToTarget <= CloseEnoughDistance) {\n        // Close enough - don't send any action so the game can sleep while waiting for players\n        return null;\n    }\n\n    return { spellId: \"move\", target };\n}\n\nfunction face(state, hero, opponent) {\n    var target = opponent.pos;\n    var targetAngle = vectorAngle(vectorDiff(opponent.pos, hero.pos));\n    var angleDelta = vectorAngleDelta(hero.heading, targetAngle);\n    if (Math.abs(angleDelta) <= CloseEnoughRadians) {\n        return null;\n    }\n\n    return { spellId: \"retarget\", target };\n}\n\nfunction dodge(state, hero, cooldowns) {\n    for (var projectileId in state.projectiles) {\n        var projectile = state.projectiles[projectileId];\n        if (projectile.ownerId === hero.id) {\n            // This is my own projectile\n            continue;\n        }\n\n        if (projectile.spellId === \"halo\") {\n            // Halo is never coming for us, it orbits around its owner\n            continue;\n        }\n\n        var diff = vectorDiff(hero.pos, projectile.pos);\n        var distancePerTimeStep = vectorDot(projectile.velocity, vectorUnit(diff));\n        if (distancePerTimeStep <= 0) {\n            // Not coming towards us\n            continue;\n        }\n\n        var timeToCollision = vectorLength(diff) / distancePerTimeStep;\n        if (timeToCollision <= 0 || timeToCollision >= 30) {\n            // Not coming towards us or too far away\n            continue;\n        }\n\n        var collisionPoint = vectorPlus(projectile.pos, vectorMultiply(projectile.velocity, timeToCollision));\n        var distanceToCollision = vectorDistance(collisionPoint, hero.pos);\n        var dodgeRadius = Math.max(DodgeRadius, projectile.radius) + hero.radius;\n        if (distanceToCollision > dodgeRadius) {\n            // Won't hit us\n            continue;\n        }\n\n        var deflectAction = deflect(state, hero, cooldowns, projectile);\n        if (deflectAction) {\n            return deflectAction;\n        }\n\n        // Run away from collision point\n        var direction = vectorUnit(vectorNegate(vectorDiff(collisionPoint, hero.pos)));\n        var step = vectorMultiply(direction, dodgeRadius);\n        var target = vectorPlus(hero.pos, step);\n        return { spellId: \"move\", target };\n    }\n    return null;\n}\n\nfunction vectorDiff(to, from) {\n    return { x: to.x - from.x, y: to.y - from.y };\n}\n\nfunction vectorLength(vector) {\n    return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n}\n\nfunction vectorDistance(from, to) {\n    return vectorLength(vectorDiff(from, to));\n}\n\nfunction vectorUnit(vec) {\n    var length = vectorLength(vec);\n    return length === 0 ? vec : vectorMultiply(vec, 1 / length);\n}\n\nfunction vectorPlus(from, offset) {\n    return { x: from.x + offset.x, y: from.y + offset.y };\n}\n\nfunction vectorMultiply(vec, multiplier) {\n    return { x: vec.x * multiplier, y: vec.y * multiplier };\n}\n\nfunction vectorRelengthen(vec, length) {\n    return vectorMultiply(vectorUnit(vec), length);\n}\n\nfunction vectorNegate(vec) {\n    return vectorMultiply(vec, -1);\n}\n\nfunction vectorDot(a, b) {\n    return (a.x * b.x) + (a.y * b.y);\n}\n\nfunction vectorMidpoint(a, b) {\n    var diff = vectorDiff(b, a);\n    return vectorPlus(a, vectorMultiply(diff, 0.5));\n}\n\nfunction vectorFromAngle(angle) {\n\treturn { x: Math.cos(angle), y: Math.sin(angle) };\n}\n\nfunction vectorAngle(vec) {\n    return Math.atan2(vec.y, vec.x);\n}\n\nfunction vectorAngleDelta(currentAngle, targetAngle) {\n\tvar delta = targetAngle - currentAngle;\n\twhile (delta > Math.PI) {\n\t\tdelta -= 2 * Math.PI;\n\t}\n\twhile (delta < -Math.PI) {\n\t\tdelta += 2 * Math.PI;\n\t}\n\treturn delta;\n}\n\n// See ai.contracts.ts: Must return a BotContract\nreturn { act };"
}