{
	"Mod": {
		"name": "Siege",
		"author": "AceMenace",
		"description": "~~~ Screen follow is recommended! ~~~",
		"titleLeft": "Siege",
		"titleRight": "!",
		"subtitleLeft": "Burn Your Flag",
		"subtitleRight": "Before The Other Team!"
	},
	"Matchmaking": {
		"MinBots": 2,
		"MaxBots": 3,
		"MaxPlayers": 12,
		"TeamsMinGames": 50
	},
	"World": {
		"InitialRadius": 2,
		"HeroLayoutProportion": 0.05,
		"LavaDamagePerSecond": 1,
		"LavaLifestealProportion": 0,
		"LavaDamageInterval": 600000,
		"SecondsToShrink": 14556284461941522000,
		"DefaultGameStartMessage": "Drag your flag to the lava pit and burn it!"
	},
	"Hero": {
		"MaxHealth": 1
	},
	"Obstacle": {
		"Density": 200
	},
	"ObstacleTemplates": {
		"bumper": {
			"$delete": true
		},
		"mirror": {
			"$delete": true
		},
		"volcano": {
			"$delete": true
		},
		"volcanoz": {
			"health": 500,
			"collideWith": 8,
			"sensor": true,
			"static": true,
			"undamageable": true,
			"strike": {
				"ticks": 15,
				"flash": true
			},
			"render": [
				{
					"type": "solid",
					"color": "rgba(255, 0, 128, 0.8)",
					"deadColor": "rgba(255, 0, 128, 0.2)",
					"glow": 0.2
				},
				{
					"type": "smoke",
					"color": "rgba(255, 0, 128, 1)",
					"particleRadius": 0.0125,
					"fade": "rgba(0, 0, 0, 0.1)",
					"bloom": 0.01,
					"glow": 0.05,
					"ticks": 90,
					"interval": 5,
					"speed": 0.05
				}
			],
			"hitInterval": 15,
			"buffs": [
				{
					"type": "burn",
					"maxTicks": 15,
					"collideWith": 65535,
					"packet": {
						"damage": 5,
						"lifeSteal": 0,
						"noKnockback": true,
						"noHit": true,
						"isLava": true
					},
					"hitInterval": 10,
					"stack": "volcano",
					"maxStacks": 1,
					"render": {
						"color": "#ff0088",
						"alpha": 0.3,
						"ticks": 30,
						"emissionRadiusFactor": 1,
						"particleRadius": 0.005,
						"shine": 0.2,
						"glow": 0.2
					}
				}
			]
		},
		"bumperz": {
			"collideWith": 65527,
			"health": 1000,
			"density": 200,
			"strike": {
				"ticks": 6,
				"flash": true,
				"growth": 0.01
			},
			"sound": "bumper",
			"render": [
				{
					"type": "solid",
					"color": "#0008",
					"shadow": true,
					"flash": false,
					"expand": 0.003
				},
				{
					"type": "bloom",
					"color": "#fc0",
					"bloom": 0.05,
					"strikeOnly": true
				},
				{
					"type": "solid",
					"color": "#0008",
					"flash": false,
					"expand": 0.003
				},
				{
					"type": "solid",
					"color": "#fc0"
				},
				{
					"type": "solid",
					"color": "#c94",
					"deadColor": "#753",
					"expand": -0.003
				}
			],
			"impulse": 0.0000325
		},
		"mirrorz": {
			"health": 1000,
			"density": 200,
			"strike": {
				"ticks": 10,
				"flash": true,
				"growth": 0.005
			},
			"render": [
				{
					"type": "solid",
					"color": "#0008",
					"shadow": true,
					"flash": false,
					"expand": 0.003
				},
				{
					"type": "bloom",
					"color": "#0cf",
					"bloom": 0.05,
					"strikeOnly": true
				},
				{
					"type": "solid",
					"color": "#0008",
					"flash": false,
					"expand": 0.003
				},
				{
					"type": "solid",
					"color": "#0cf"
				},
				{
					"type": "solid",
					"color": "#0ad",
					"deadColor": "#48f",
					"expand": -0.003
				}
			],
			"mirror": true
		},
		"redflag": {
			"health": 500,
			"strike": {
				"ticks": 6,
				"flash": true,
				"growth": 0.005
			},
			"render": [
				{
					"type": "solid",
					"color": "#ff0000",
					"shadow": true,
					"flash": false,
					"expand": 0.003
				},
				{
					"type": "bloom",
					"color": "#ccc",
					"strikeOnly": true,
					"bloom": 0.05
				},
				{
					"type": "solid",
					"color": "#0008",
					"flash": false,
					"expand": 0.003
				},
				{
					"type": "solid",
					"color": "#ddd",
					"deadColor": "#c33"
				},
				{
					"type": "solid",
					"color": "#999",
					"deadColor": "#822",
					"expand": -0.003
				}
			]
		},
		"blueflagMain": {
			"health": 500,
			"strike": {
				"ticks": 6,
				"flash": true,
				"growth": 0.005
			},
			"render": [
				{
					"type": "solid",
					"color": "#0000ff",
					"shadow": true,
					"flash": false,
					"expand": 0.003
				},
				{
					"type": "bloom",
					"color": "#ccc",
					"strikeOnly": true,
					"bloom": 0.05
				},
				{
					"type": "solid",
					"color": "#0008",
					"flash": false,
					"expand": 0.003
				},
				{
					"type": "solid",
					"color": "#ddd",
					"deadColor": "#c33"
				},
				{
					"type": "solid",
					"color": "#0000ff",
					"deadColor": "#822",
					"expand": -0.003
				}
			],
			"detonate": {
				"damage": 1,
				"minImpulse": 0,
				"maxImpulse": 0,
				"radius": 2,
				"renderTicks": 1,
				"sound": "explosive"
			}
		},
		"blueflag": {
			"health": 500,
			"strike": {
				"ticks": 6,
				"flash": true,
				"growth": 0.005
			},
			"render": [
				{
					"type": "solid",
					"color": "#0000ff",
					"shadow": true,
					"flash": false,
					"expand": 0.003
				},
				{
					"type": "bloom",
					"color": "#ccc",
					"strikeOnly": true,
					"bloom": 0.05
				},
				{
					"type": "solid",
					"color": "#0008",
					"flash": false,
					"expand": 0.003
				},
				{
					"type": "solid",
					"color": "#ddd",
					"deadColor": "#c33"
				},
				{
					"type": "solid",
					"color": "#999",
					"deadColor": "#822",
					"expand": -0.003
				}
			]
		},
		"redflagMain": {
			"health": 500,
			"strike": {
				"ticks": 6,
				"flash": true,
				"growth": 0.005
			},
			"render": [
				{
					"type": "solid",
					"color": "#ff0000",
					"shadow": true,
					"flash": false,
					"expand": 0.003
				},
				{
					"type": "bloom",
					"color": "#ccc",
					"strikeOnly": true,
					"bloom": 0.05
				},
				{
					"type": "solid",
					"color": "#0008",
					"flash": false,
					"expand": 0.003
				},
				{
					"type": "solid",
					"color": "#ddd",
					"deadColor": "#c33"
				},
				{
					"type": "solid",
					"color": "#ff0000",
					"deadColor": "#822",
					"expand": -0.003
				}
			],
			"detonate": {
				"damage": 1,
				"minImpulse": 0,
				"maxImpulse": 0,
				"radius": 2,
				"renderTicks": 1,
				"sound": "explosive"
			}
		},
		"outerRing": {
			"health": 10000000,
			"density": 10000000,
			"strike": {
				"ticks": 10,
				"flash": true,
				"growth": 0.005
			},
			"render": [
				{
					"type": "solid",
					"color": "#0008",
					"shadow": true,
					"flash": false,
					"expand": 0.003
				},
				{
					"type": "bloom",
					"color": "#0cf",
					"bloom": 0.05,
					"strikeOnly": true
				},
				{
					"type": "solid",
					"color": "#0008",
					"flash": false,
					"expand": 0.003
				},
				{
					"type": "solid",
					"color": "#0cf"
				},
				{
					"type": "solid",
					"color": "#0ad",
					"deadColor": "#48f",
					"expand": -0.003
				}
			],
			"mirror": true
		},
		"blueflagBase": {
			"health": 1000,
			"density": 300,
			"strike": {
				"ticks": 6,
				"flash": true,
				"growth": 0.005
			},
			"render": [
				{
					"type": "solid",
					"color": "#0000ff",
					"shadow": true,
					"flash": false,
					"expand": 0.003
				},
				{
					"type": "bloom",
					"color": "#ccc",
					"strikeOnly": true,
					"bloom": 0.05
				},
				{
					"type": "solid",
					"color": "#0008",
					"flash": false,
					"expand": 0.003
				},
				{
					"type": "solid",
					"color": "#ddd",
					"deadColor": "#c33"
				},
				{
					"type": "solid",
					"color": "#999",
					"deadColor": "#822",
					"expand": -0.003
				}
			]
		},
		"redflagBase": {
			"health": 1000,
			"density": 300,
			"strike": {
				"ticks": 6,
				"flash": true,
				"growth": 0.005
			},
			"render": [
				{
					"type": "solid",
					"color": "#ff0000",
					"shadow": true,
					"flash": false,
					"expand": 0.003
				},
				{
					"type": "bloom",
					"color": "#ccc",
					"strikeOnly": true,
					"bloom": 0.05
				},
				{
					"type": "solid",
					"color": "#0008",
					"flash": false,
					"expand": 0.003
				},
				{
					"type": "solid",
					"color": "#ddd",
					"deadColor": "#c33"
				},
				{
					"type": "solid",
					"color": "#999",
					"deadColor": "#822",
					"expand": -0.003
				}
			]
		},
		"pre-gameteammaker": {
			"health": 1000,
			"collideWith": 1,
			"sensor": true,
			"static": true,
			"hitInterval": 120,
			"render": [
				{
					"type": "solid",
					"color": "rgba(255,0,255,0.2)",
					"deadColor": "rgba(255,0,255,0.1)",
					"glow": 0.2,
					"flash": true
				},
				{
					"type": "smoke",
					"color": "rgba(255,0,255,0.75)",
					"particleRadius": 0.002,
					"fade": "rgba(255,0,255,0.1)",
					"ticks": 60,
					"interval": 3,
					"speed": 0
				}
			],
			"buffs": [
				{
					"type": "cooldown",
					"against": 12,
					"maxTicks": 1,
					"minCooldown": 120
				}
			]
		}
	},
	"Choices": {
		"Keys": [
			{
				"btn": "f",
				"barSize": 0.5,
				"wheelSize": 0.5
			},
			null,
			{
				"btn": "q",
				"barSize": 1,
				"wheelSize": 1
			},
			{
				"btn": "w",
				"barSize": 1,
				"wheelSize": 1
			},
			{
				"btn": "e",
				"barSize": 1,
				"wheelSize": 1
			}
		],
		"Options": {
			"a": {
				"$delete": true
			},
			"q": [
				[
					"grappleR"
				],
				[
					"grappleB"
				]
			],
			"w": [
				[
					"lightning"
				],
				[
					"slowdown"
				],
				[
					"pull"
				],
				[
					"arrow"
				],
				[
					"mine"
				]
			],
			"e": [
				[
					"lightning2"
				],
				[
					"ram"
				],
				[
					"heavy"
				],
				[
					"reload"
				],
				[
					"detach"
				]
			],
			"r": {
				"$delete": true
			},
			"f": [
				[
					"boostR"
				],
				[
					"boostB"
				]
			]
		}
	},
	"Spells": {
		"fireball": {
			"$delete": true
		},
		"flamestrike": {
			"$delete": true
		},
		"firespray": {
			"$delete": true
		},
		"triplet": {
			"$delete": true
		},
		"difire": {
			"$delete": true
		},
		"meteor": {
			"$delete": true
		},
		"meteorite": {
			"$delete": true
		},
		"gravity": {
			"$delete": true
		},
		"whirlwind": {
			"$delete": true
		},
		"link": {
			"$delete": true
		},
		"grapple": {
			"$delete": true
		},
		"kamehameha": {
			"$delete": true
		},
		"lightning": {
			"name": "V-Bolt",
			"description": "Shoot a literal bolt of lightning to knockback and stun your enemies!",
			"color": "#ffff00",
			"cooldown": 180,
			"chargeTicks": 10,
			"projectile": {
				"density": 2,
				"color": "#ffff00",
				"renderers": [
					{
						"type": "bloom",
						"radius": 0.05
					},
					{
						"type": "ray",
						"intermediatePoints": true,
						"ticks": 45,
						"vanish": 0.5
					},
					{
						"type": "strike",
						"ticks": 60,
						"flash": true,
						"detonate": 0.03
					}
				],
				"buffs": [
					{
						"type": "movement",
						"maxTicks": 60,
						"movementProportion": 0.1,
						"stack": "lightning",
						"render": {
							"color": "rgba(255,255,0,1)",
							"alpha": 0.3,
							"ticks": 5,
							"emissionRadiusFactor": 1,
							"particleRadius": 0.01,
							"shine": 0.2,
							"glow": 0.2,
							"bloom": 0.03
						}
					}
				]
			}
		},
		"blast": {
			"$delete": true
		},
		"homing": {
			"$delete": true
		},
		"boomerang": {
			"$delete": true
		},
		"retractor": {
			"$delete": true
		},
		"backlash": {
			"$delete": true
		},
		"rocket": {
			"$delete": true
		},
		"whip": {
			"$delete": true
		},
		"bouncer": {
			"$delete": true
		},
		"repeater": {
			"$delete": true
		},
		"drain": {
			"$delete": true
		},
		"icewall": {
			"$delete": true
		},
		"horcrux": {
			"$delete": true
		},
		"saber": {
			"$delete": true
		},
		"dualSaber": {
			"$delete": true
		},
		"scourge": {
			"$delete": true
		},
		"shield": {
			"$delete": true
		},
		"phaseOut": {
			"$delete": true
		},
		"supernova": {
			"$delete": true
		},
		"halo": {
			"$delete": true
		},
		"mines": {
			"$delete": true
		},
		"iceBomb": {
			"$delete": true
		},
		"teleport": {
			"$delete": true
		},
		"thrust": {
			"$delete": true
		},
		"blaze": {
			"$delete": true
		},
		"swap": {
			"$delete": true
		},
		"voidRush": {
			"$delete": true
		},
		"vanish": {
			"$delete": true
		},
		"armor": {
			"$delete": true
		},
		"empower": {
			"$delete": true
		},
		"boost": {
			"$delete": true
		},
		"bump": {
			"$delete": true
		},
		"boostR": {
			"id": "boostR",
			"name": "Team Red",
			"description": "TRUE RED!",
			"passive": true,
			"untargeted": true,
			"cooldown": 1,
			"buffs": [
				{
					"type": "movement",
					"passive": true,
					"movementProportion": 1
				},
				{
					"type": "lavaImmunity",
					"damageProportion": 1,
					"passive": true,
					"render": {
						"color": "#f02",
						"ticks": 1,
						"emissionRadiusFactor": 0,
						"particleRadius": 0.00005,
						"glow": 1,
						"vanish": 0.1,
						"bloom": 0.01,
						"bloomLow": 0.01
					}
				}
			],
			"icon": "dodging",
			"color": "#f02",
			"action": "buff"
		},
		"grappleR": {
			"id": "grappleR",
			"description": "Hold the button down to grab your flag. Move and tow your flag behind you to get it into the lava pit! TRUE RED!",
			"action": "focus",
			"color": "#f02",
			"icon": "grapple",
			"maxAngleDiffInRevs": 0.01,
			"cooldown": 300,
			"throttle": false,
			"unlink": true,
			"release": {},
			"maxChannellingTicks": 120,
			"movementProportionWhileChannelling": 1,
			"projectile": {
				"density": 1,
				"radius": 0.003,
				"speed": 0.6,
				"maxTicks": 5,
				"damage": 0,
				"collideWith": 8,
				"expireOn": 13,
				"expireOnMirror": false,
				"shieldTakesOwnership": false,
				"link": {
					"linkWith": 8,
					"selfFactor": 1,
					"targetFactor": 1,
					"impulsePerTick": 7.5e-7,
					"sidewaysImpulsePerTick": 7.5e-7,
					"massInvariant": true,
					"minDistance": 0.025,
					"maxDistance": 0.05,
					"linkTicks": 600,
					"channelling": true,
					"render": {
						"type": "link",
						"color": "#f02",
						"width": 0.0015,
						"toWidth": 0.003,
						"glow": 0.2,
						"shine": 0.25
					}
				},
				"buffs": [
					{
						"collideWith": 65535,
						"owner": true,
						"type": "glide",
						"maxTicks": 60,
						"linkOwner": true,
						"linearDampingMultiplier": 10
					},
					{
						"collideWith": 1,
						"type": "glide",
						"maxTicks": 60,
						"linkVictim": true,
						"linearDampingMultiplier": 0.9
					}
				],
				"behaviours": [
					{
						"type": "expireOnOwnerDeath"
					},
					{
						"type": "expireOnChannellingEnd"
					}
				],
				"sound": "grapple",
				"color": "#f02",
				"renderers": [
					{
						"type": "bloom",
						"radius": 0.05
					},
					{
						"type": "polygon",
						"color": "#f02",
						"numPoints": 3,
						"radiusMultiplier": 4,
						"revolutionInterval": 31,
						"ticks": 1
					},
					{
						"type": "link",
						"color": "#f02",
						"width": 0.001,
						"toWidth": 0.005,
						"glow": 0.2,
						"shine": 0.25
					}
				]
			},
			"name": "Flag Grabber"
		},
		"grappleB": {
			"id": "grappleB",
			"description": "Hold the button down to grab your flag. Move and tow your flag behind you to get it into the lava pit! TRUE BLUE!",
			"action": "focus",
			"color": "#0000ff",
			"icon": "grapple",
			"maxAngleDiffInRevs": 0.01,
			"cooldown": 300,
			"throttle": false,
			"unlink": true,
			"release": {},
			"maxChannellingTicks": 120,
			"movementProportionWhileChannelling": 1,
			"projectile": {
				"density": 1,
				"radius": 0.003,
				"speed": 0.6,
				"maxTicks": 5,
				"damage": 0,
				"collideWith": 8,
				"expireOn": 13,
				"expireOnMirror": false,
				"shieldTakesOwnership": false,
				"link": {
					"linkWith": 8,
					"selfFactor": 1,
					"targetFactor": 1,
					"impulsePerTick": 2e-7,
					"sidewaysImpulsePerTick": 2e-7,
					"massInvariant": true,
					"minDistance": 0.015,
					"maxDistance": 0.035,
					"linkTicks": 600,
					"channelling": true,
					"render": {
						"type": "link",
						"color": "#0000ff",
						"width": 0.0015,
						"toWidth": 0.003,
						"glow": 0.2,
						"shine": 0.25
					}
				},
				"buffs": [
					{
						"collideWith": 65535,
						"owner": true,
						"type": "glide",
						"maxTicks": 60,
						"linkOwner": true,
						"linearDampingMultiplier": 10
					},
					{
						"collideWith": 1,
						"type": "glide",
						"maxTicks": 60,
						"linkVictim": true,
						"linearDampingMultiplier": 0.9
					}
				],
				"behaviours": [
					{
						"type": "expireOnOwnerDeath"
					},
					{
						"type": "expireOnChannellingEnd"
					}
				],
				"sound": "grapple",
				"color": "#0000ff",
				"renderers": [
					{
						"type": "bloom",
						"radius": 0.05
					},
					{
						"type": "polygon",
						"color": "#0000ff",
						"numPoints": 3,
						"radiusMultiplier": 4,
						"revolutionInterval": 31,
						"ticks": 1
					},
					{
						"type": "link",
						"color": "#0000ff",
						"width": 0.001,
						"toWidth": 0.005,
						"glow": 0.2,
						"shine": 0.25
					}
				]
			},
			"name": "Flag Grabber"
		},
		"boostB": {
			"id": "boostB",
			"name": "Team Blue",
			"description": "TRUE BLUE!",
			"passive": true,
			"untargeted": true,
			"cooldown": 1,
			"buffs": [
				{
					"type": "movement",
					"passive": true,
					"movementProportion": 1
				},
				{
					"type": "lavaImmunity",
					"damageProportion": 1,
					"passive": true,
					"render": {
						"color": "#0000ff",
						"ticks": 1,
						"emissionRadiusFactor": 0,
						"particleRadius": 0.00005,
						"glow": 1,
						"vanish": 0.1,
						"bloom": 0.01,
						"bloomLow": 0.01
					}
				}
			],
			"icon": "dodging",
			"color": "#0000ff",
			"action": "buff"
		},
		"commitdie": {
			"id": "commitdie",
			"name": "Commit Die For Testing Purposes",
			"description": "For testing purposes, press to commit not-alive with a 5-second warning period. If you stop moving, it means you've activated Commit Die; cast any spell to cancel it.  DO NOT USE TO RAGE QUIT!",
			"untargeted": true,
			"movementCancel": true,
			"chargeBuffs": [
				{
					"type": "mass",
					"maxTicks": 30,
					"channelling": true,
					"radius": 0.0125,
					"density": 2.16
				},
				{
					"type": "glide",
					"maxTicks": 30,
					"channelling": true,
					"linearDampingMultiplier": 4
				}
			],
			"detonate": {
				"damage": 0,
				"radius": 0.01,
				"minImpulse": 0.001,
				"maxImpulse": 0.002,
				"renderTicks": 30
			},
			"chargeTicks": 300,
			"cooldown": 60,
			"throttle": false,
			"unlink": false,
			"interruptibleAfterTicks": 0,
			"interruptCancel": {
				"cooldownTicks": 60
			},
			"selfDamage": 100000000000000,
			"minSelfHealth": 0,
			"icon": "deadlyStrike",
			"trailTicks": 30,
			"color": "#ffcc00",
			"sound": "scourge",
			"action": "scourge"
		},
		"slowdown": {
			"id": "slowdown",
			"name": "Winter Storm",
			"description": "Shoot a little snowball to slow down enemies. Hitting an enemy will reset cooldown. Keep on hitting your enemies to stack the slowing effect!",
			"action": "projectile",
			"color": "#B0E0E6",
			"icon": "traps",
			"maxAngleDiffInRevs": 0.01,
			"cooldown": 240,
			"throttle": true,
			"chargeTicks": 6,
			"projectile": {
				"density": 6,
				"radius": 0.0035,
				"speed": 0.575,
				"maxTicks": 240,
				"damage": 0,
				"lifeSteal": 0,
				"categories": 2,
				"sound": "fireball",
				"soundHit": "standard",
				"color": "#B0E0E6",
				"buffs": [
					{
						"type": "cooldown",
						"owner": true,
						"maxTicks": 1,
						"against": 4,
						"spellId": "slowdown",
						"maxCooldown": 0,
						"sound": "repeater",
						"color": "#B0E0E6"
					},
					{
						"type": "movement",
						"maxTicks": 240,
						"movementProportion": 0.75,
						"render": {
							"color": "rgba(64, 255, 255, 0.25)",
							"alpha": 0.3,
							"ticks": 15,
							"emissionRadiusFactor": 1,
							"particleRadius": 0.01,
							"shine": 0.2,
							"glow": 0.2,
							"bloom": 0.03
						}
					}
				],
				"renderers": [
					{
						"type": "bloom",
						"radius": 0.04
					},
					{
						"type": "projectile",
						"ticks": 90,
						"smoke": {
							"isotropicSpeed": 0.025
						},
						"vanish": 1
					},
					{
						"type": "strike",
						"ticks": 30,
						"flash": true,
						"numParticles": 7
					}
				]
			}
		},
		"pull": {
			"id": "pull",
			"name": "Distortion Orb",
			"description": "Shoot an orb that will forcibly root any enemy it touches. Hard to hit but quite rewarding!",
			"action": "projectile",
			"color": "#000000",
			"icon": "atomicSlashes",
			"sound": "gravity",
			"maxAngleDiffInRevs": 0.01,
			"cooldown": 240,
			"throttle": true,
			"chargeTicks": 8,
			"projectile": {
				"density": 1,
				"ccd": false,
				"attractable": true,
				"radius": 0.012,
				"speed": 0.37,
				"maxTicks": 300,
				"damage": 0,
				"noHit": true,
				"collideWith": 65535,
				"gravity": {
					"impulsePerTick": 0.00004,
					"ticks": 150,
					"radius": 0.2,
					"power": 2
				},
				"sound": "gravity",
				"color": "#000000",
				"renderers": [
					{
						"type": "swirl",
						"color": "#000000",
						"radius": 0.004,
						"ticks": 60,
						"loopTicks": 30,
						"numParticles": 1,
						"particleRadius": 0.0055,
						"glow": 0.2,
						"shine": 0.4,
						"vanish": 0.5,
						"bloom": 0.04
					},
					{
						"type": "strike",
						"ticks": 120,
						"flash": true,
						"numParticles": 4
					}
				]
			}
		},
		"sentry": {
			"id": "sentry",
			"name": "Sentry",
			"description": "Generate an energy shield that around you, which reflects away projectiles. Beware, enemies can still attack you if they get close enough.",
			"maxTicks": 360,
			"cooldown": 720,
			"throttle": false,
			"minRadius": 0.06,
			"strokeRadius": 0.07,
			"radius": 0.08,
			"growthTicks": 120,
			"angularWidthInRevs": 1,
			"maxTurnRatePerTickInRevs": 0.01,
			"chargeTicks": 30,
			"takesOwnership": false,
			"blocksTeleporters": false,
			"damageMultiplier": 1,
			"buffs": [
				{
					"type": "movement",
					"maxTicks": 360,
					"movementProportion": 0
				}
			],
			"icon": "shieldReflect",
			"color": "#3366ff",
			"glow": 0.2,
			"bloom": 0.015,
			"shine": 0.1,
			"strike": {
				"ticks": 60,
				"flash": true,
				"growth": 0.3,
				"bloom": 0.03
			},
			"action": "shield",
			"sound": "shield"
		},
		"reload": {
			"id": "reload",
			"name": "Back-Up Charge",
			"description": "Reloads your main attack instantly!",
			"untargeted": true,
			"maxAngleDiffInRevs": 1,
			"cooldown": 240,
			"throttle": false,
			"debuff": false,
			"buffs": [
				{
					"type": "movement",
					"movementProportion": 1,
					"maxTicks": 1
				},
				{
					"type": "cooldown",
					"owner": true,
					"maxTicks": 1,
					"spellId": "slowdown",
					"maxCooldown": 0,
					"sound": "repeater",
					"color": "#B0E0E6"
				},
				{
					"type": "cooldown",
					"owner": true,
					"maxTicks": 1,
					"spellId": "mine",
					"maxCooldown": 0,
					"sound": "repeater",
					"color": "#ff9a00"
				},
				{
					"type": "cooldown",
					"owner": true,
					"maxTicks": 1,
					"spellId": "arrow",
					"maxCooldown": 0,
					"sound": "repeater",
					"color": "#ff00ff"
				},
				{
					"type": "cooldown",
					"owner": true,
					"maxTicks": 1,
					"spellId": "pull",
					"maxCooldown": 0,
					"sound": "repeater",
					"color": "#ffff00"
				},
				{
					"type": "cooldown",
					"owner": true,
					"maxTicks": 1,
					"spellId": "lightning",
					"maxCooldown": 0,
					"sound": "repeater",
					"color": "#ffff00"
				},
				{
					"type": "lavaImmunity",
					"damageProportion": 0,
					"maxTicks": 5,
					"sound": "voidRush-lavaImmunity",
					"render": {
						"color": "#fff",
						"heroColor": true,
						"ticks": 16,
						"emissionRadiusFactor": 0,
						"particleRadius": 0.018750000000000003,
						"glow": 0.2,
						"shine": 1,
						"bloom": 0.07,
						"decay": true
					}
				}
			],
			"icon": "sprint",
			"color": "#ff0000",
			"action": "buff"
		},
		"arrow": {
			"id": "arrow",
			"name": "Magic Arrow",
			"description": "Shoot a magical arrow that bounces off any surface and knocks enemies back. Hitting an enemy will reset cooldown.",
			"action": "projectile",
			"color": "#ff00ff",
			"icon": "thunderball",
			"maxAngleDiffInRevs": 0.01,
			"cooldown": 180,
			"throttle": true,
			"chargeTicks": 6,
			"projectile": {
				"density": 50,
				"radius": 0.002,
				"speed": 0.55,
				"maxTicks": 210,
				"damage": 0,
				"selfPassthrough": true,
				"lifeSteal": 0,
				"categories": 2,
				"expireOn": 500,
				"sound": "fireball",
				"soundHit": "standard",
				"color": "#ff00ff",
				"buffs": [
					{
						"type": "cooldown",
						"owner": true,
						"maxTicks": 1,
						"against": 4,
						"spellId": "arrow",
						"maxCooldown": 0,
						"sound": "repeater",
						"color": "#ff00ff"
					}
				],
				"renderers": [
					{
						"type": "bloom",
						"radius": 0.02
					},
					{
						"type": "projectile",
						"ticks": 30,
						"fade": "#0000ff",
						"smoke": 0.05
					},
					{
						"type": "ray",
						"fade": "#0000ff",
						"ticks": 20
					},
					{
						"type": "strike",
						"ticks": 30,
						"numParticles": 7
					}
				]
			}
		},
		"detach": {
			"id": "detach",
			"name": "Detacher",
			"description": "Swing a saber to detach grapples from their flags.",
			"untargeted": true,
			"unlink": true,
			"takesOwnership": true,
			"blocksTeleporters": false,
			"shiftMultiplier": 0,
			"speedMultiplier": 0,
			"maxSpeed": 0.5,
			"maxTurnRatePerTickInRevs": 0.1,
			"damageMultiplier": 0,
			"angleOffsetsInRevs": [
				0
			],
			"width": 0.001,
			"length": 0.08,
			"movementProportionWhileChannelling": 0.5,
			"interruptibleAfterTicks": 20,
			"cooldown": 240,
			"throttle": false,
			"icon": "waveStrike",
			"maxTicks": 120,
			"channelling": true,
			"categories": 16,
			"collidesWith": 3,
			"damageTemplate": {
				"damage": 0
			},
			"hitBuffs": [
				{
					"type": "delink"
				}
			],
			"trailTicks": 20,
			"color": "#00ccff",
			"shine": 0.1,
			"glow": 0.2,
			"bloom": 0.03,
			"strike": {
				"ticks": 6,
				"flash": true,
				"bloom": 0.03
			},
			"sound": "saber",
			"action": "saber"
		},
		"ram": {
			"id": "ram",
			"name": "Battering Ram",
			"description": "Charge up for a long time and unleash a heavy ray that will push everything in front of you aside. Try to stay protected during charge time, or the skill will be canceled.",
			"action": "spray",
			"sound": "kamehameha",
			"color": "#44ddff",
			"icon": "glowingHands",
			"maxAngleDiffInRevs": 0.0001,
			"chargeTicks": 210,
			"cooldown": 600,
			"throttle": true,
			"revsPerTickWhileCharging": 0,
			"revsPerTickWhileChannelling": 0.0001,
			"movementCancel": true,
			"strikeCancel": {
				"cooldownTicks": 600
			},
			"interruptibleAfterTicks": 0,
			"interruptCancel": {
				"cooldownTicks": 720,
				"maxChannelingTicks": 0
			},
			"jitterRatio": 0,
			"intervalTicks": 5,
			"lengthTicks": 240,
			"projectile": {
				"density": 2,
				"attractable": false,
				"radius": 0.007,
				"speed": 3,
				"maxTicks": 30,
				"damage": 0,
				"lifeSteal": 0,
				"categories": 6,
				"swappable": false,
				"selfPassthrough": true,
				"destroying": true,
				"sound": "kamehameha",
				"color": "#ffffff",
				"renderers": [
					{
						"type": "ray",
						"intermediatePoints": true,
						"ticks": 60,
						"glow": 0.1,
						"bloom": 0.01
					}
				]
			}
		},
		"mine": {
			"id": "mine",
			"name": "Frostnova",
			"description": "Shoot a bomb that explodes and freezes nearby enemies after a short delay. The bomb will not be affected by enemies but will bounce off objects.",
			"action": "projectile",
			"color": "#00FFFF",
			"icon": "crownedExplosion",
			"maxAngleDiffInRevs": 0.01,
			"cooldown": 180,
			"throttle": true,
			"chargeTicks": 6,
			"projectile": {
				"density": 5,
				"ccd": false,
				"radius": 0.001,
				"speed": 0.3,
				"maxTicks": 180,
				"damage": 0,
				"collideWith": 8,
				"expireOn": 0,
				"expireAfterCursorTicks": 45,
				"behaviours": [
					{
						"type": "homing",
						"targetType": "cursor",
						"trigger": {
							"atCursor": true
						},
						"newSpeed": 0,
						"redirect": true
					},
					{
						"type": "homing",
						"targetType": "cursor",
						"trigger": {
							"afterTicks": 60
						},
						"newSpeed": 0,
						"redirect": true
					}
				],
				"detonate": {
					"damage": 0,
					"radius": 0.04,
					"minImpulse": 0,
					"maxImpulse": 0,
					"renderTicks": 80,
					"buffs": [
						{
							"type": "movement",
							"maxTicks": 180,
							"movementProportion": 0.1,
							"render": {
								"color": "rgba(64, 255, 255, 1)",
								"alpha": 0.3,
								"ticks": 30,
								"emissionRadiusFactor": 1,
								"particleRadius": 0.01,
								"shine": 0.2,
								"glow": 0.2,
								"bloom": 0.03
							}
						}
					]
				},
				"sound": "supernova",
				"color": "#00FFFF",
				"renderers": [
					{
						"type": "ray",
						"ticks": 20,
						"vanish": 1
					},
					{
						"type": "swirl",
						"color": "#00FFFF",
						"radius": 0.002,
						"ticks": 20,
						"loopTicks": 40,
						"numParticles": 2,
						"particleRadius": 0.001,
						"glow": 0.2,
						"shine": 0.3,
						"vanish": 0.5,
						"bloom": 0.03
					}
				]
			}
		},
		"ram2": {
			"id": "ram2",
			"name": "Battering Blast",
			"description": "Charge up for a long time and unleash a heavy blast that will push everything in front of you aside. Try to stay protected during charge time, or the skill will be canceled.",
			"action": "charge",
			"color": "#0ff",
			"icon": "fireRay",
			"sound": "blast",
			"maxAngleDiffInRevs": 0.01,
			"cooldown": 600,
			"throttle": true,
			"chargeTicks": 240,
			"release": {
				"maxChargeTicks": 660
			},
			"retarget": true,
			"movementProportionWhileCharging": 0.5,
			"strikeCancel": {
				"cooldownTicks": 660
			},
			"chargeDamage": {
				"initialMultiplier": 0.1,
				"ticks": 240
			},
			"chargeRadius": {
				"initialMultiplier": 0.1,
				"ticks": 240
			},
			"chargeImpulse": {
				"initialMultiplier": 0.01,
				"ticks": 240
			},
			"projectile": {
				"density": 50,
				"square": true,
				"ccd": false,
				"attractable": false,
				"selfPassthrough": true,
				"linkable": true,
				"swappable": true,
				"radius": 0.0275,
				"speed": 0.35,
				"restitution": 0,
				"minTicks": 1,
				"maxTicks": 150,
				"hitInterval": 120,
				"damage": 0,
				"shieldTakesOwnership": false,
				"categories": 6,
				"collideWith": 65519,
				"expireOn": 0,
				"sound": "blast",
				"color": "#0ff",
				"renderers": [
					{
						"type": "bloom",
						"selfColor": true,
						"radius": 0.07
					},
					{
						"type": "projectile",
						"ticks": 10,
						"selfColor": true,
						"shine": 1,
						"smoke": 0.15,
						"glow": 0.2,
						"vanish": 0.5
					},
					{
						"type": "strike",
						"ticks": 10,
						"numParticles": 10,
						"flash": true
					}
				]
			}
		},
		"heavy": {
			"id": "heavy",
			"name": "Fortify",
			"description": "Reinforce your defenses and reduce incoming knockback for a short while.",
			"untargeted": true,
			"maxAngleDiffInRevs": 1,
			"cooldown": 600,
			"throttle": false,
			"debuff": true,
			"buffs": [
				{
					"type": "mass",
					"maxTicks": 120,
					"radius": 0.012,
					"density": 5
				},
				{
					"type": "lavaImmunity",
					"damageProportion": 1,
					"maxTicks": 120,
					"sound": "voidRush-lavaImmunity",
					"render": {
						"color": "#fff",
						"ticks": 1,
						"emissionRadiusFactor": 0,
						"particleRadius": 0.02,
						"glow": 0.2,
						"shine": 1,
						"bloom": 0.07,
						"decay": true
					}
				}
			],
			"icon": "shield",
			"color": "#00EA00",
			"action": "buff"
		},
		"lightning2": {
			"id": "lightning2",
			"name": "Recall Orb",
			"description": "Place down an orb that will swap you with any enemy that it touches. You will be teleported to its location when it expires, even if no enemy ran into it during the time.",
			"action": "projectile",
			"color": "#23e3ff",
			"icon": "bodySwapping",
			"maxAngleDiffInRevs": 0.01,
			"cooldown": 150,
			"throttle": false,
			"debuff": false,
			"projectile": {
				"density": 0.001,
				"radius": 0.0075,
				"speed": 0,
				"maxTicks": 300,
				"damage": 0,
				"categories": 2,
				"collideWith": 1,
				"expireOn": 65535,
				"expireOnMirror": true,
				"swappable": false,
				"shieldTakesOwnership": false,
				"detonate": {
					"damage": 0,
					"lifeSteal": 0,
					"radius": 0.01,
					"minImpulse": 0,
					"maxImpulse": 0,
					"swapWith": 1,
					"renderTicks": 15
				},
				"behaviours": [
					{
						"type": "expireOnOwnerDeath"
					}
				],
				"buffs": [
					{
						"collideWith": 65535,
						"type": "debuff",
						"owner": true,
						"maxTicks": 1
					}
				],
				"sound": "swap",
				"color": "#75e7ff",
				"renderers": [
					{
						"type": "bloom"
					},
					{
						"type": "swirl",
						"color": "#75e7ff",
						"ticks": 30,
						"radius": 0.0075,
						"particleRadius": 0.001,
						"smoke": 0.05,
						"numParticles": 1,
						"vanish": 1,
						"loopTicks": 15,
						"glow": 0.02
					},
					{
						"type": "projectile",
						"ticks": 1,
						"radiusMultiplier": 0.5
					},
					{
						"type": "strike",
						"color": "#75e7ff",
						"flash": true,
						"ticks": 15,
						"numParticles": 10
					}
				]
			}
		}
	},
	"Layouts": {
		"circle": {
			"$delete": true
		},
		"cold": {
			"$delete": true
		},
		"octogon": {
			"$delete": true
		},
		"return": {
			"$delete": true
		},
		"double": {
			"$delete": true
		},
		"ring": {
			"$delete": true
		},
		"exit": {
			"$delete": true
		},
		"heal": {
			"$delete": true
		},
		"snowflake": {
			"$delete": true
		},
		"inside5": {
			"$delete": true
		},
		"single": {
			"$delete": true
		},
		"pepper": {
			"$delete": true
		},
		"mirrors": {
			"$delete": true
		},
		"innerStar": {
			"$delete": true
		},
		"mirrorhenge": {
			"$delete": true
		},
		"spiral": {
			"$delete": true
		},
		"triplet": {
			"$delete": true
		},
		"square": {
			"$delete": true
		},
		"surrounded": {
			"$delete": true
		},
		"tripletSwirl": {
			"$delete": true
		},
		"arena": {
			"color": "#332e26",
			"background": "#1f1a18",
			"numPoints": 8,
			"obstacles": [
				{
					"type": "redflagMain",
					"numObstacles": 1,
					"layoutRadius": -0.7,
					"layoutAngleOffsetInRevs": 0,
					"numPoints": 6,
					"extent": 0.025,
					"orientationAngleOffsetInRevs": 0.125
				},
				{
					"type": "volcanoz",
					"numObstacles": 1,
					"layoutRadius": 0,
					"layoutAngleOffsetInRevs": 0,
					"numPoints": 6,
					"extent": 0.02,
					"orientationAngleOffsetInRevs": 0.125
				},
				{
					"type": "pre-gameteammaker",
					"numObstacles": 1,
					"layoutRadius": 0,
					"layoutAngleOffsetInRevs": 0,
					"numPoints": 6,
					"extent": 0.035,
					"orientationAngleOffsetInRevs": 0.125
				},
				{
					"type": "blueflagMain",
					"numObstacles": 1,
					"layoutRadius": 0.7,
					"layoutAngleOffsetInRevs": 0,
					"numPoints": 6,
					"extent": 0.025,
					"orientationAngleOffsetInRevs": 0.125
				},
				{
					"type": "bumperz",
					"numObstacles": 10,
					"layoutRadius": 0.3,
					"layoutAngleOffsetInRevs": 0,
					"numPoints": 4,
					"extent": 0.003,
					"orientationAngleOffsetInRevs": 0,
					"angularWidthInRevs": 0.0525
				},
				{
					"type": "mirrorz",
					"numObstacles": 10,
					"layoutRadius": 0.35,
					"layoutAngleOffsetInRevs": 1,
					"numPoints": 4,
					"extent": 0.003,
					"orientationAngleOffsetInRevs": 0,
					"angularWidthInRevs": 0.055
				},
				{
					"type": "outerRing",
					"numObstacles": 8,
					"layoutRadius": 1,
					"layoutAngleOffsetInRevs": 0,
					"numPoints": 4,
					"extent": 0.008,
					"orientationAngleOffsetInRevs": 0,
					"angularWidthInRevs": 0.12455
				},
				{
					"type": "redflagBase",
					"numObstacles": 1,
					"layoutRadius": -0.55,
					"layoutAngleOffsetInRevs": 0,
					"numPoints": 4,
					"extent": 0.01,
					"orientationAngleOffsetInRevs": 0,
					"angularWidthInRevs": 0.06
				},
				{
					"type": "redflagBase",
					"numObstacles": 1,
					"layoutRadius": -0.55,
					"layoutAngleOffsetInRevs": 0.08,
					"numPoints": 4,
					"extent": 0.01,
					"orientationAngleOffsetInRevs": 0.02,
					"angularWidthInRevs": 0.04
				},
				{
					"type": "redflagBase",
					"numObstacles": 1,
					"layoutRadius": -0.55,
					"layoutAngleOffsetInRevs": -0.08,
					"numPoints": 4,
					"extent": 0.01,
					"orientationAngleOffsetInRevs": -0.02,
					"angularWidthInRevs": 0.04
				},
				{
					"type": "blueflagBase",
					"numObstacles": 1,
					"layoutRadius": 0.55,
					"layoutAngleOffsetInRevs": 0.08,
					"numPoints": 4,
					"extent": 0.01,
					"orientationAngleOffsetInRevs": 0.02,
					"angularWidthInRevs": 0.04
				},
				{
					"type": "blueflagBase",
					"numObstacles": 1,
					"layoutRadius": 0.55,
					"layoutAngleOffsetInRevs": -0.08,
					"numPoints": 4,
					"extent": 0.01,
					"orientationAngleOffsetInRevs": -0.02,
					"angularWidthInRevs": 0.04
				},
				{
					"type": "blueflagBase",
					"numObstacles": 1,
					"layoutRadius": 0.55,
					"layoutAngleOffsetInRevs": 0,
					"numPoints": 4,
					"extent": 0.01,
					"orientationAngleOffsetInRevs": 0,
					"angularWidthInRevs": 0.06
				},
				{
					"type": "blueflag",
					"numObstacles": 1,
					"layoutRadius": 0.7,
					"layoutAngleOffsetInRevs": 0.09,
					"numPoints": 6,
					"extent": 0.01,
					"orientationAngleOffsetInRevs": 0
				},
				{
					"type": "blueflag",
					"numObstacles": 1,
					"layoutRadius": 0.85,
					"layoutAngleOffsetInRevs": 0,
					"numPoints": 6,
					"extent": 0.01,
					"orientationAngleOffsetInRevs": 0
				},
				{
					"type": "blueflag",
					"numObstacles": 1,
					"layoutRadius": 0.8,
					"layoutAngleOffsetInRevs": 0.015,
					"numPoints": 6,
					"extent": 0.01,
					"orientationAngleOffsetInRevs": 0
				},
				{
					"type": "blueflag",
					"numObstacles": 1,
					"layoutRadius": 0.8,
					"layoutAngleOffsetInRevs": -0.015,
					"numPoints": 6,
					"extent": 0.01,
					"orientationAngleOffsetInRevs": 0
				},
				{
					"type": "blueflag",
					"numObstacles": 1,
					"layoutRadius": 0.7,
					"layoutAngleOffsetInRevs": 0.06,
					"numPoints": 6,
					"extent": 0.01,
					"orientationAngleOffsetInRevs": 0
				},
				{
					"type": "blueflag",
					"numObstacles": 1,
					"layoutRadius": 0.7,
					"layoutAngleOffsetInRevs": 0.03,
					"numPoints": 6,
					"extent": 0.01,
					"orientationAngleOffsetInRevs": 0
				},
				{
					"type": "blueflag",
					"numObstacles": 1,
					"layoutRadius": 0.7,
					"layoutAngleOffsetInRevs": -0.03,
					"numPoints": 6,
					"extent": 0.01,
					"orientationAngleOffsetInRevs": 0
				},
				{
					"type": "blueflag",
					"numObstacles": 1,
					"layoutRadius": 0.7,
					"layoutAngleOffsetInRevs": -0.06,
					"numPoints": 6,
					"extent": 0.01,
					"orientationAngleOffsetInRevs": 0
				},
				{
					"type": "blueflag",
					"numObstacles": 1,
					"layoutRadius": 0.7,
					"layoutAngleOffsetInRevs": -0.09,
					"numPoints": 6,
					"extent": 0.01,
					"orientationAngleOffsetInRevs": 0
				},
				{
					"type": "redflag",
					"numObstacles": 1,
					"layoutRadius": -0.7,
					"layoutAngleOffsetInRevs": 0.09,
					"numPoints": 6,
					"extent": 0.01,
					"orientationAngleOffsetInRevs": 0
				},
				{
					"type": "redflag",
					"numObstacles": 1,
					"layoutRadius": -0.7,
					"layoutAngleOffsetInRevs": 0.06,
					"numPoints": 6,
					"extent": 0.01,
					"orientationAngleOffsetInRevs": 0
				},
				{
					"type": "redflag",
					"numObstacles": 1,
					"layoutRadius": -0.85,
					"layoutAngleOffsetInRevs": 0,
					"numPoints": 6,
					"extent": 0.01,
					"orientationAngleOffsetInRevs": 0
				},
				{
					"type": "redflag",
					"numObstacles": 1,
					"layoutRadius": -0.7,
					"layoutAngleOffsetInRevs": 0.03,
					"numPoints": 6,
					"extent": 0.01,
					"orientationAngleOffsetInRevs": 0
				},
				{
					"type": "redflag",
					"numObstacles": 1,
					"layoutRadius": -0.7,
					"layoutAngleOffsetInRevs": -0.03,
					"numPoints": 6,
					"extent": 0.01,
					"orientationAngleOffsetInRevs": 0
				},
				{
					"type": "redflag",
					"numObstacles": 1,
					"layoutRadius": -0.7,
					"layoutAngleOffsetInRevs": -0.06,
					"numPoints": 6,
					"extent": 0.01,
					"orientationAngleOffsetInRevs": 0
				},
				{
					"type": "redflag",
					"numObstacles": 1,
					"layoutRadius": -0.7,
					"layoutAngleOffsetInRevs": -0.09,
					"numPoints": 6,
					"extent": 0.01,
					"orientationAngleOffsetInRevs": 0
				},
				{
					"type": "redflag",
					"numObstacles": 1,
					"layoutRadius": -0.8,
					"layoutAngleOffsetInRevs": 0.015,
					"numPoints": 6,
					"extent": 0.01,
					"orientationAngleOffsetInRevs": 0
				},
				{
					"type": "redflag",
					"numObstacles": 1,
					"layoutRadius": -0.8,
					"layoutAngleOffsetInRevs": -0.015,
					"numPoints": 6,
					"extent": 0.01,
					"orientationAngleOffsetInRevs": 0
				}
			]
		}
	},
	"Visuals": {
		"WorldAnimateWinTicks": 60,
		"ExitTicks": 300,
		"ChargingRadius": 0.01
	},
	"Icons": {
		"traps": {
			"path": "M147.7 47.51c-18.5 1.07-20 4.26-25.8 21.09l-61.08 184c-4.93 31.5-43.19 39.2-35.94 75.4 4.32 17.6 38.84 14 44.66 31.1 8.92 26.4-44.79 59.6-25.46 79.7 21.62 22.4 59.92-33.3 90.02-25.2 21.6 5.8 22.5 69.5 44.3 74.4 40.8 9.2 79.6-60.3 119.5-74.3 57.8-19.3 104.6 59.7 134.8 40.7 18.4-13.3-1-39.2-4.4-67.9 1.9-36.6 72.6-21.7 57.7-53.6-9.4-11.6-23.5-18.7-40.4-22.7l39-117.6c4.6-13.6 1.3-20.9-8-27.9L335.9 54.6c-9.1-7.26-16.5-11.45-24.2-13.65-51.4-5.4-110.3 3.4-164 6.56zM271 56.74c14.5 0 25.4 1.17 35.4 4.14 18.9 5.63 34.3 17.44 63.9 40.52 67 52 91.9 73.9 37 78.3-65.6 5.5-112.4 5.5-142.9-20.2l-76.6-64.67c-23.9-20.23-29-32.42 26-35.67 24.4-1.41 42.6-2.46 57.2-2.42zM140.9 83.23c15.7 2.9 41.7 27.67 48.7 33.67 97 83 96 85.3 56.6 190.1-2.9 7.6-5.5 14.5-7.9 20.7-6.4.5-12.8.5-19.2.1 5.6-9.4 9.4-20 11.2-25.4 16.5-49.9 11-92 .2-113-4.8-9.2-10.2-13.6-13.8-14.7-18.4 8.3-17.1 31.8-37 38.4-26.5 6.1-51-13.4-70.7 8.9-17.04 22-13.41 39.3 1.2 58.4 6.2 8.1 14.3 16 23 23.7-16.3-7-31.7-14.3-45.82-20.5-11.37-15.4-11.24-28.4-3.79-50.5L126.4 105c4.5-13.77 7.6-21.67 14.5-21.77zm172.4 19.97c-19.6-.3-31.7 9.7-36 20.5-3.1 7.8-2.3 16.2 3.7 23.8 5.9 7.4 17.7 14.3 37.4 16.2 30.1 2.9 52.4 2.6 66.9.1 24.2-4.2 24.9-10.5 8.6-24.5-9.9-8.3-26.5-18.1-48.4-28.1-10.4-4.4-21.5-7.7-32.2-8zm104 92.9c9.5.1 17 .7 22.7 2.3 23.4 6.6 16.5 29.2-3.6 89.8-2.3 6.8-4.4 13.2-6.4 19.2-5.9-.7-12-1.2-18.3-1.4 5.5-13.5 10.3-29 14.1-46.5 4.6-17.6-7.7-44.3-25.6-30.6-4.5 3.7-8.9 10.1-11.1 20.9-3 13.9-12.5 29.2-25.5 41.7-32.3 22.2-72.6 27.5-107.1 33.8l31-83.4c13.9-37.4 18.2-39.2 95.1-44.3 13.8-.9 25.2-1.5 34.7-1.5zm-105.7 33.6c-5.9 8-5.7 21.7-.8 34.2 5.7 14.3 12.6 17.3 21.2 16.8 8.6-.3 19.7-6.2 28.1-14.7 8.4-8.6 14-19.5 14.3-27.2.1-9.9-8-13.6-15.4-15.8-15-3.4-37.3-6.3-47.4 6.7zm-1.4 202.4c-2.9 0-5.6.6-7.9 2.1-9.2 5.9-1.9 25.4 6.7 32.2 9.1 7.2 31.4 10 3z",
			"credit": "https://game-icons.net/lorc/originals/crossed-slashes.html"
		}
	},
	"Code": "var center = { x: 0.5, y: 0.5 };\n\nvar CloseEnoughDistance = 0.01;\nvar MissRadius = 0.05;\nvar DodgeRadius = 0.15;\nvar SpellCastIntervalMilliseconds = 1000;\nvar SpellCastJitterMilliseconds = 500;\n\nvar TicksPerSecond = 60;\n\nvar DefaultReactionMilliseconds = 600;\nvar ReactionMillisecondsLookup = { // Change the reaction time on certain spells\n    retarget: 200,\n};\n\nvar alreadyChosenSpells = false;\nvar nextSpell = 0;\n\n// See ai.contracts.ts:\n// input is InputContract - contains information about the current state of the world\n// output is OutputContract - an action you want to take in response to the world \nfunction act(input) {\n    // Want the bot to do nothing? Uncomment the line below (remove the //):\n    return null;\n\n    var state = input.state;\n    var heroId = input.heroId;\n    var hero = state.heroes[heroId];\n    var cooldowns = input.cooldowns;\n    var settings = input.settings;\n\n    var opponent = findOpponent(state.heroes, heroId);\n    if (!(hero && opponent)) {\n        // Either we're dead, or everyone else is, nothing to do\n        return null;\n    }\n    \n    var action = null;\n    if (state.started) {\n        action =\n            recovery(state, hero, cooldowns)\n            || dodge(state, hero, cooldowns)\n            || castSpell(state, hero, opponent, cooldowns, settings)\n            || focus(hero, opponent)\n            || chase(state, hero, cooldowns, opponent)\n            || move(state, hero);\n    } else {\n        action =\n            chooseSpells(settings)\n            || dodge(state, hero, cooldowns)\n            || move(state, hero);\n    }\n\n    if (action) {\n        // Give the bot a reaction time otherwise it is OP\n        var reactionMilliseconds = ReactionMillisecondsLookup[action.spellId] || DefaultReactionMilliseconds;\n        action.delayMilliseconds = reactionMilliseconds;\n        return action;\n    } else {\n        return null;\n    }\n}\n\nfunction chooseSpells(settings) {\n    if (alreadyChosenSpells) {\n        return null;\n    }\n    alreadyChosenSpells = true;\n\n    var spells = randomSpells(settings);\n\n    // Want to test a particular spell? Uncomment and edit the lines below\n    // spells[\"e\"] = \"saber\";\n\n    return { spells };\n}\n\nfunction randomSpells(settings) {\n\tvar keyBindings = {};\n\tvar allOptions = settings.Choices.Options;\n\tfor (var btn in allOptions) { // One of the buttons, e.g. Q or R\n        var options = allOptions[btn];\n\n        var spellIds = [];\n        for (var i = 0; i < options.length; ++i) {\n            var row = options[i];\n            for (var j = 0; j < row.length; ++j) {\n                var spellId = row[j];\n                spellIds.push(spellId);\n            }\n        }\n\n\t\tif (spellIds.length > 1) {\n\t\t\tkeyBindings[btn] = spellIds[Math.floor(Math.random() * spellIds.length)];\n\t\t}\n\t}\n\treturn keyBindings;\n}\n\nfunction findOpponent(heroes, myHeroId) {\n    var myHero = heroes[myHeroId];\n    if (!myHero) {\n        return null;\n    }\n\n    var choice = null;\n    var mostHealth = 0;\n    for (var heroId in heroes) {\n        var hero = heroes[heroId];\n\n        if (!hero.isEnemy) { continue; }\n\n        // Uncomment the line below to only target humans\n        // if (hero.isBot) { continue; }\n\n        if (hero.health > mostHealth) {\n            // Target the enemy with the most health\n            mostHealth = hero.health;\n            choice = hero;\n        }\n    }\n    return choice;\n}\n\nfunction recovery(state, hero, cooldowns) {\n    if (hero.inside || state.radius <= 0) {\n        // No need to recover\n        return null;\n    }\n\n    var spellId = null;\n    if (cooldowns[\"teleport\"] === 0) {\n        spellId = \"teleport\";\n    } else if (cooldowns[\"thrust\"] === 0) {\n        spellId = \"thrust\";\n    } else if (cooldowns[\"swap\"] === 0) {\n        spellId = \"swap\";\n    } else if (cooldowns[\"voidRush\"] === 0) {\n        spellId = \"voidRush\";\n    } else if (cooldowns[\"vanish\"] === 0) {\n        spellId = \"vanish\";\n    } else {\n        spellId = \"move\";\n    }\n\n    if (spellId) {\n        return { spellId, target: center };\n    }\n    return null;\n}\n\nfunction deflect(state, hero, cooldowns, projectile) {\n    var target = vectorMidpoint(hero.pos, projectile.pos);\n    var spellId = null;\n    if (cooldowns[\"shield\"] === 0) {\n        spellId = \"shield\";\n    } else if (cooldowns[\"icewall\"] === 0) {\n        spellId = \"icewall\";\n    } else if (cooldowns[\"saber\"] === 0) {\n        spellId = \"saber\";\n    } else if (cooldowns[\"dualSaber\"] === 0) {\n        spellId = \"dualSaber\";\n    } else if (cooldowns[\"meteor\"] === 0) {\n        spellId = \"meteor\";\n    } else if (cooldowns[\"meteorite\"] === 0) {\n        spellId = \"meteorite\";\n    } else if (cooldowns[\"whirlwind\"] === 0) {\n        spellId = \"whirlwind\";\n    } else if (cooldowns[\"phaseOut\"] === 0) {\n        spellId = \"phaseOut\";\n    } else {\n        spellId = null;\n    }\n\n    if (spellId) {\n        return { spellId, target };\n    } else {\n        return null;\n    }\n}\n\nfunction castSpell(state, hero, opponent, cooldowns, settings) {\n    if (!readyForNextSpell(hero)) {\n        return null;\n    }\n\n    var candidates = [];\n    for (var spellId in cooldowns) {\n        var readyToCast = !cooldowns[spellId];\n        var spell = settings.Spells[spellId];\n\n        if (spell\n            && readyToCast\n            && validAttack(state, hero, opponent, spell)) {\n\n            candidates.push(spellId);\n        }\n    }\n\n    if (candidates.length > 0) {\n        var spellId = candidates[Math.floor(Math.random() * candidates.length)];\n        var action = { spellId, target: jitter(opponent.pos, MissRadius) };\n        if (action.spellId === spellId) {\n            updateNextSpellTime();\n        }\n        return action;\n    } else {\n        return null;\n    }\n}\n\nfunction validAttack(state, hero, opponent, spell) {\n    var opponentShielded = !!opponent.shieldTicksRemaining;\n\n    var distance = vectorDistance(hero.pos, opponent.pos);\n    if (spell.action === \"projectile\" || spell.action === \"spray\" || spell.action === \"retractor\" || spell.action === \"focus\" || spell.action === \"charge\") {\n        if (spell.projectile.swapWith) { // Swap doesn't work as an attack\n            return false;\n        }\n        if (opponentShielded && !spell.projectile.detonate) { // Detonate spells can penetrate shields, nothing else can\n            return false;\n        }\n        if (spell.id === \"whip\") {\n            // Just keep casting Electroshock even if out of range\n            return true;\n        }\n\n        var range = spell.projectile.speed * spell.projectile.maxTicks / TicksPerSecond + opponent.radius;\n        return distance <= range;\n    } else if (spell.action === \"scourge\") {\n        var range = spell.radius + opponent.radius;\n        return distance <= range;\n    } else if (spell.id === \"blaze\") {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction readyForNextSpell(hero) {\n    return (\n        Date.now() >= nextSpell // Don't cast too fast\n        || !!hero.link // If linked to something, cast as many spells as possible\n    );\n}\n\nfunction updateNextSpellTime() {\n    nextSpell = Date.now() + SpellCastIntervalMilliseconds + Math.floor((Math.random() < 0.5 ? -1 : 1) * Math.random() * SpellCastJitterMilliseconds);\n}\n\nfunction jitter(target, missRadius) {\n    var radius = Math.random() * missRadius;\n    var angle = Math.random() * 2 * Math.PI;\n    return {\n        x: target.x + radius * Math.cos(angle),\n        y: target.y + radius * Math.sin(angle),\n    };\n}\n\nfunction focus(hero, opponent) { // When using a spell (e.g. Acolyte Beam, Spirit Missile) - ensure we are focusing the enemy, otherwise we will miss\n    if (hero.casting) {\n        if (hero.casting.spellId === \"blast\" || hero.casting.spellId === \"retractor\" || hero.casting.spellId === \"rocket\") {\n            // Have to release or it won't fire\n            return { spellId: hero.casting.spellId, release: true, target: opponent.pos };\n        } else if (hero.casting.spellId === \"saber\" || hero.casting.spellId === \"dualSaber\") {\n            // Don't focus the lightsaber, just swish it around\n            return { spellId: \"retarget\", target: vectorPlus(hero.pos, vectorFromAngle(hero.heading + Math.PI / 2)) };\n        } else if (hero.casting.spellId === \"grapple\") {\n            // Throw away to the right (TODO: be smarter about this)\n            return { spellId: hero.casting.spellId, release: true, target: vectorPlus(hero.pos, vectorFromAngle(hero.heading + Math.PI / 2)) };\n        } else if (hero.casting.spellId === \"halo\") {\n            return { spellId: \"move\", target: opponent.pos };\n        } else {\n            return { spellId: \"retarget\", target: opponent.pos };\n        }\n    } else {\n        return null;\n    }\n}\n\nfunction chase(state, hero, cooldowns, opponent) {\n    if (\"whip\" in cooldowns) {\n        // Got to get within range when using Electroshock\n        var target = vectorMidpoint(hero.pos, opponent.pos);\n        return { spellId: \"move\", target };\n    } else {\n        return null;\n    }\n}\n\nfunction move(state, hero) {\n    var centroid = { x: 0, y: 0 };\n    var numOpponents = 0;\n    for (var heroId in state.heroes) {\n        if (heroId === hero.id) {\n            continue; // Ignore self\n        }\n\n        var opponent = state.heroes[heroId];\n        centroid.x += opponent.pos.x;\n        centroid.y += opponent.pos.y;\n\n        ++numOpponents;\n    }\n    centroid.x /= numOpponents;\n    centroid.y /= numOpponents;\n\n    if (!numOpponents) {\n        return;\n    }\n\n    var offset = vectorNegate(vectorDiff(centroid, center)); // Move to the opposite side of the arena\n    var targetDistance = state.radius * 0.33; // Closer to center than edge (for polygonal maps)\n    var target = vectorPlus(center, vectorRelengthen(offset, targetDistance));\n\n    var distanceToTarget = vectorDistance(hero.pos, target);\n    if (distanceToTarget <= CloseEnoughDistance) {\n        // Close enough - don't send any action so the game can sleep while waiting for players\n        return null;\n    }\n\n    return { spellId: \"move\", target };\n}\n\nfunction dodge(state, hero, cooldowns) {\n    for (var projectileId in state.projectiles) {\n        var projectile = state.projectiles[projectileId];\n        if (projectile.ownerId === hero.id) {\n            // This is my own projectile\n            continue;\n        }\n\n        if (projectile.spellId === \"halo\") {\n            // Halo is never coming for us, it orbits around its owner\n            continue;\n        }\n\n        var diff = vectorDiff(hero.pos, projectile.pos);\n        var distancePerTimeStep = vectorDot(projectile.velocity, vectorUnit(diff));\n        if (distancePerTimeStep <= 0) {\n            // Not coming towards us\n            continue;\n        }\n\n        var timeToCollision = vectorLength(diff) / distancePerTimeStep;\n        if (timeToCollision <= 0 || timeToCollision >= 30) {\n            // Not coming towards us or too far away\n            continue;\n        }\n\n        var collisionPoint = vectorPlus(projectile.pos, vectorMultiply(projectile.velocity, timeToCollision));\n        var distanceToCollision = vectorDistance(collisionPoint, hero.pos);\n        var dodgeRadius = Math.max(DodgeRadius, projectile.radius) + hero.radius;\n        if (distanceToCollision > dodgeRadius) {\n            // Won't hit us\n            continue;\n        }\n\n        var deflectAction = deflect(state, hero, cooldowns, projectile);\n        if (deflectAction) {\n            return deflectAction;\n        }\n\n        // Run away from collision point\n        var direction = vectorUnit(vectorNegate(vectorDiff(collisionPoint, hero.pos)));\n        var step = vectorMultiply(direction, dodgeRadius);\n        var target = vectorPlus(hero.pos, step);\n        return { spellId: \"move\", target };\n    }\n    return null;\n}\n\nfunction vectorDiff(to, from) {\n    return { x: to.x - from.x, y: to.y - from.y };\n}\n\nfunction vectorLength(vector) {\n    return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n}\n\nfunction vectorDistance(from, to) {\n    return vectorLength(vectorDiff(from, to));\n}\n\nfunction vectorUnit(vec) {\n    var length = vectorLength(vec);\n    return length === 0 ? vec : vectorMultiply(vec, 1 / length);\n}\n\nfunction vectorPlus(from, offset) {\n    return { x: from.x + offset.x, y: from.y + offset.y };\n}\n\nfunction vectorMultiply(vec, multiplier) {\n    return { x: vec.x * multiplier, y: vec.y * multiplier };\n}\n\nfunction vectorRelengthen(vec, length) {\n    return vectorMultiply(vectorUnit(vec), length);\n}\n\nfunction vectorNegate(vec) {\n    return vectorMultiply(vec, -1);\n}\n\nfunction vectorDot(a, b) {\n    return (a.x * b.x) + (a.y * b.y);\n}\n\nfunction vectorMidpoint(a, b) {\n    var diff = vectorDiff(b, a);\n    return vectorPlus(a, vectorMultiply(diff, 0.5));\n}\n\nfunction vectorFromAngle(angle) {\n\treturn { x: Math.cos(angle), y: Math.sin(angle) };\n}\n\n// See ai.contracts.ts: Must return a BotContract\nreturn { act };"
}