{
	"Mod": {
		"name": "Hunt The Turkey",
		"author": "-voXal-",
		"description": "The Turkey says the sky is falling, the hunters want to eat him now XD",
		"titleLeft": "Kill",
		"titleRight": "The Turkey",
		"subtitleLeft": "Happy",
		"subtitleRight": "Thanksgiving!"
	},
	"Matchmaking": {
		"MinBots": 2,
		"MaxPlayers": 3,
		"AllowBotTeams": true
	},
	"World": {
		"InitialRadius": 0.6,
		"LavaDamagePerSecond": 10000000000000000,
		"SecondsToShrink": 60,
		"BotName": "Hunters",
		"DefaultGameStartMessage": "The Sky is falling! RUN!!!"
	},
	"Choices": {
		"Keys": [
			{
				"btn": "a",
				"barSize": 0.75,
				"wheelSize": 0.5
			},
			null,
			{
				"btn": "q",
				"barSize": 1,
				"wheelSize": 1
			},
			{
				"btn": "w",
				"barSize": 1,
				"wheelSize": 0.75
			}
		],
		"Options": {
			"a": [
				[
					"hunter"
				],
				[
					"turkey"
				]
			],
			"q": [
				[
					"fireball"
				],
				[
					"chickrun"
				]
			],
			"w": [
				[
					"gravity"
				],
				[
					"chic"
				]
			],
			"e": {
				"$delete": true
			},
			"r": {
				"$delete": true
			},
			"f": {
				"$delete": true
			}
		}
	},
	"Spells": {
		"fireball": {
			"description": "Shoot that Crazy Chiken down!",
			"color": "#b5651d",
			"icon": "mus",
			"cooldown": 180,
			"projectile": {
				"speed": 1.5,
				"damage": 999,
				"color": "#888",
				"renderers": [
					{
						"type": "ray",
						"ticks": 5
					},
					{
						"type": "strike",
						"ticks": 30,
						"flash": true,
						"numParticles": 5
					}
				]
			},
			"name": "Musket"
		},
		"gravity": {
			"name": "Trap",
			"description": "Trap The TURKEY, don't get yourself traped!",
			"color": "#b5651d",
			"icon": "trap",
			"cooldown": 900,
			"chargeTicks": 180,
			"projectile": {
				"maxTicks": 999999999999999,
				"gravity": {
					"ticks": 300,
					"render": {
						"color": "#2ecc71",
						"radius": 0.003
					}
				},
				"renderers": [
					{
						"type": "swirl",
						"color": "#0ace00",
						"radius": 0.02,
						"ticks": 15,
						"loopTicks": 20,
						"numParticles": 3,
						"particleRadius": 0.000333,
						"glow": 0.2,
						"shine": 0.4,
						"vanish": 0.5,
						"bloom": 0.04
					}
				]
			}
		},
		"swap": {
			"name": "Trap",
			"description": "Trap The TURKEY",
			"projectile": {
				"speed": 0,
				"maxTicks": 99999,
				"damage": 999,
				"detonate": {
					"damage": 999
				}
			}
		},
		"hunter": {
			"id": "hunter",
			"description": "Hunt The Chicken",
			"effects": [
				{
					"icon": "fas fa-shield",
					"title": "Resistant",
					"text": "Reduce damage received by 15%. Applies to all forms of damage, including void damage."
				}
			],
			"passive": true,
			"untargeted": true,
			"cooldown": 1,
			"buffs": [
				{
					"type": "armor",
					"passive": true,
					"proportion": -0.99
				},
				{
					"type": "lavaImmunity",
					"damageProportion": 99999999999999,
					"passive": true,
					"sound": "voidRush-lavaImmunity",
					"render": {
						"color": "#b5651d",
						"heroColor": true,
						"ticks": 1,
						"emissionRadiusFactor": 0,
						"particleRadius": 0.0125,
						"decay": true,
						"glow": 0.2,
						"shine": 0.5,
						"bloom": 0.03,
						"vanish": 1
					}
				}
			],
			"icon": "hunt",
			"color": "#b5651d",
			"action": "buff"
		},
		"turkey": {
			"id": "turkey",
			"description": "The Sky is falling!!!!!!!!!!",
			"effects": [
				{
					"icon": "fas fa-running",
					"title": "Fast",
					"text": "Increase movement speed by 10%."
				}
			],
			"passive": true,
			"untargeted": true,
			"cooldown": 1,
			"buffs": [
				{
					"type": "movement",
					"movementProportion": 1.7,
					"passive": true
				},
				{
					"type": "lavaImmunity",
					"damageProportion": 0,
					"passive": true,
					"sound": "voidRush-lavaImmunity",
					"render": {
						"color": "#b57281",
						"ticks": 30,
						"emissionRadiusFactor": 0,
						"particleRadius": 0.0125,
						"decay": true,
						"glow": 0.2,
						"shine": 0.5,
						"bloom": 0.03,
						"vanish": 1
					}
				}
			],
			"icon": "chick",
			"color": "#b57281",
			"action": "buff"
		},
		"chickrun": {
			"id": "chickrun",
			"name": "Turkey Run",
			"description": "RUN TURKEY RUN!!!",
			"effects": [
				{
					"icon": "fas fa-briefcase-medical",
					"title": "Cleanse",
					"text": "Clears all positive and negative effects."
				},
				{
					"icon": "fas fa-clock",
					"title": "Void recharge",
					"text": "Cools down 2x faster when in the void."
				}
			],
			"untargeted": true,
			"maxAngleDiffInRevs": 1,
			"cooldown": 600,
			"throttle": false,
			"debuff": true,
			"buffs": [
				{
					"type": "movement",
					"movementProportion": 2.5,
					"maxTicks": 150
				},
				{
					"type": "lavaImmunity",
					"damageProportion": 0,
					"maxTicks": 150,
					"sound": "voidRush-lavaImmunity",
					"render": {
						"color": "#b57281",
						"ticks": 60,
						"emissionRadiusFactor": 0,
						"particleRadius": 0.0125,
						"decay": true,
						"glow": 0.2,
						"shine": 0.5,
						"bloom": 0.03,
						"vanish": 1
					}
				}
			],
			"icon": "sprint",
			"color": "#b57281",
			"action": "buff"
		},
		"chic": {
			"id": "chic",
			"name": "Turkey Sorcery",
			"description": "Teleport to a nearby location. Get away.",
			"effects": [
				{
					"icon": "fas fa-heartbeat",
					"title": "Weak",
					"text": "For 0.25 seconds after teleporting, you will only deal 25% damage and cannot deal fatal damage."
				},
				{
					"icon": "fas fa-briefcase-medical",
					"title": "Cleanse",
					"text": "Clears all positive and negative effects."
				},
				{
					"icon": "fas fa-clock",
					"title": "Void recharge",
					"text": "Cools down 2x faster when in the void."
				}
			],
			"range": 0.5,
			"maxAngleDiffInRevs": 1,
			"cooldown": 720,
			"throttle": false,
			"debuff": true,
			"chargeTicks": 6,
			"movementProportionWhileCharging": 1,
			"icon": "teleport",
			"color": "#b57281",
			"action": "teleport",
			"sound": "teleport",
			"buffs": [
				{
					"owner": true,
					"type": "lifeSteal",
					"maxTicks": 15,
					"damageMultiplier": 0.25,
					"minHealth": 1,
					"decay": true
				}
			]
		}
	},
	"Layouts": {
		"circle": {
			"color": "#2ecc71",
			"background": "#3498db"
		},
		"cold": {
			"$delete": true
		},
		"octogon": {
			"$delete": true
		},
		"return": {
			"$delete": true
		},
		"double": {
			"$delete": true
		},
		"ring": {
			"$delete": true
		},
		"exit": {
			"$delete": true
		},
		"heal": {
			"$delete": true
		},
		"snowflake": {
			"$delete": true
		},
		"inside5": {
			"$delete": true
		},
		"single": {
			"$delete": true
		},
		"pepper": {
			"$delete": true
		},
		"mirrors": {
			"$delete": true
		},
		"innerStar": {
			"$delete": true
		},
		"mirrorhenge": {
			"$delete": true
		},
		"spiral": {
			"$delete": true
		},
		"triplet": {
			"$delete": true
		},
		"square": {
			"$delete": true
		},
		"surrounded": {
			"$delete": true
		},
		"tripletSwirl": {
			"$delete": true
		}
	},
	"Sounds": {
		"sound-k3b3fxk9": {
			"cutoffEarly": false,
			"start": [
				{
					"volume": 0.25,
					"stopTime": 0.5,
					"attack": 0.1,
					"decay": 0.25,
					"startFreq": 4800,
					"stopFreq": 7200,
					"modStartFreq": 30,
					"modStopFreq": 30,
					"modStartStrength": 3600,
					"modStopStrength": 10800,
					"tremoloFreq": 30,
					"tremoloStrength": 0.1,
					"wave": "triangle",
					"ratios": [
						1,
						1.33,
						1.5
					]
				}
			]
		}
	},
	"Visuals": {
		"HighlightHexShineFactor": 0
	},
	"Icons": {
		"mus": {
			"path": "M424.045 26.605l2.54 11.19 16.15-13.06zm-205.53 312.32a24.07 24.07 0 0 0 1.54-36l6.15-5.17c.72.73 1.41 1.5 2.07 2.31a32.09 32.09 0 0 1-45.62 44.74q2.13-3.69 4.14-7a24.12 24.12 0 0 0 31.72 1.12zm-18.1-19.47l10.32 7.66-15.53-2.3c.58-.81 1.14-1.58 1.69-2.29zm76.89-80.34l-31.33-38.65 15.26-12.34 31.33 38.65zm137.88-111.75l-31.33-38.65 15.27-12.37 31.33 38.64zm-41.83-26.18l25.91 32c-26.82 22.18-62.15 51.42-96.92 80.29l-26.75-33zm-252.76 239.74l10 1.16 32.83-65.86a28.13 28.13 0 0 0 41-38.11l4.52-3.67 26.53-21.52 27.14 33.48c-32.82 27.33-61.6 51.43-77.37 65-26.12 32.63-84.5 163.79-95.81 175.86-13.73-4.68-26.77-40.12-54-55.2 9.14-18.66 85.16-91.14 85.16-91.14zm33.05-113.81c1.5 2.11 5.69 5.81 8.38 5.81h.06c.35 0 1.29.17 2.48-1.65 7.15-11 18-16.41 25.26-12.77l-3.59 7.2c-1.77-.89-5.5.3-9.38 3.63l14.75 18.2a12.13 12.13 0 1 1-18.91.1l-6-7.44a10 10 0 0 1-4.4 1.12h-.23c-8.12 0-14.83-9.36-14.89-9.45zm259.84-158.46l46.5-37.73 11.06 13.68-46.49 37.69zm63.08 1.27l-37.46 30.31-5.73-7.07 37.42-30.34z",
			"credit": "https://game-icons.net/lorc/originals/burning-dot.html"
		},
		"trap": {
			"path": "M60.406 156.688L24 259.75 203.938 324c-.238-8.905 1.562-18.017 5.625-26.594 7.02-14.822 19.54-25.345 33.906-30.187l-24.44-53.908-19.124 54.125-33-72.718-19.094 54.093-33-72.72-19.968 56.532-34.438-75.938zm399.781 0l-34.468 75.937-19.97-56.53-33 72.718-19.094-54.094-33 72.718-19.125-54.125-31.936 70.468c-2.292-.53-4.602-.85-6.906-.936-.462-.018-.915-.03-1.375-.03-14.28-.007-28.097 8.283-34.875 22.592-9.33 19.695-1.36 42.64 17.5 51.656 18.86 9.017 41.483.758 50.812-18.937 1.127-2.38 1.99-4.805 2.625-7.25l199.22-71.125-36.408-103.063zM199.78 178.03v18.69h120.595v-18.69H199.78zm50.126 35.345v52.906h18.688v-52.905h-18.688zm10.25 90.563c9.678 0 17.53 7.824 17.53 17.5.002 9.675-7.854 17.53-17.53 17.53-9.676 0-17.53-7.853-17.53-17.53 0-9.678 7.852-17.5 17.53-17.5zM99.53 336.967c-50.15 13.628-82.56 33.83-82.56 56.22 0 41.017 106.544 74.343 237.718 74.343 131.173 0 237.687-33.327 237.687-74.342 0-22.313-32.124-42.595-81.97-56.22 17.232 8.878 27.533 19.275 27.533 30.47 0 32.127-82.313 58.53-183.25 58.53-100.938 0-182.657-26.403-182.657-58.53 0-11.257 10.095-21.56 27.5-30.47z",
			"credit": "https://game-icons.net/lorc/originals/boomerang-sun.html"
		},
		"hunt": {
			"path": "M254.566 20.055c-59.624 0-99.147 26.426-125.21 65.767-25.084 37.862-36.733 88.14-37.583 136.746 35.068 17.25 55.994 35.297 65.088 54.416 8.03 16.882 4.974 34.41-5.042 47.96 22.02 19.97 59.516 32.352 98.135 32.972 38.86.624 77.95-10.4 102.942-33.174-5.034-5.972-8.774-12.36-10.582-19.37-2.54-9.836-.836-20.485 4.687-30.134 10.514-18.37 33.286-34.804 70.354-52.71-.878-46.03-12.275-96.24-37.225-134.714-25.985-40.068-65.52-67.76-125.564-67.76zm-75.748 125.982c46.19 10.87 94.98 10.703 145.752.205-25.867 37.59-123.918 37.62-145.752-.205zm-20.312 13.53c7.698 30.39 30.63 47.76 73.336 45.984l-1.112 33.59c-39.39 20.126-72.635 1.99-103.71-19.048h-.002c-4.848-30.567-.204-54.706 31.488-60.526zm186.69 0c31.69 5.82 36.333 29.958 31.486 60.525h-.002c-31.076 21.04-64.32 39.174-103.71 19.047l-1.11-33.59c42.707 1.776 65.637-15.594 73.335-45.984zM250.97 252.19c12.102 21.818 21.704 43.634 26.47 65.45-13.016 9.698-36.32 11.107-52.938 0 6.443-21.816 14.19-43.632 26.47-65.45zM100.405 353.108c-50.152 13.628-82.55 33.813-82.55 56.204 0 41.018 106.523 74.352 237.697 74.352s237.698-33.334 237.698-74.35c0-22.312-32.12-42.58-81.965-56.205 17.23 8.88 27.518 19.25 27.518 30.444 0 32.13-82.31 58.546-183.247 58.546-100.937 0-182.662-26.418-182.662-58.545 0-11.253 10.112-21.534 27.518-30.443h-.004zm62.54 2.637l-14.903 23.41c6.624 5.312 14.328 9.978 22.855 13.955l10.898-28.796c-6.58-2.48-12.888-5.336-18.848-8.57zm177.605.53c-5.772 3.14-11.804 5.894-18.038 8.28l10.703 28.477c8.005-3.6 15.612-7.817 22.666-12.676l-15.33-24.08zm-140.905 13.673L188.3 399.924c9.524 3.093 19.698 5.462 30.253 7.064l3.87-32.513c-7.754-1.09-15.377-2.6-22.778-4.528zm105.04.287c-7.468 1.95-15.113 3.434-22.85 4.48l3.823 32.126c10.274-1.605 20.384-3.967 30.112-7.11l-11.086-29.496zm-63.654 6.045l-3.893 32.712c9.87.637 19.92.623 29.947-.07l-3.873-32.535c-4.52.206-9.045.287-13.558.215-2.878-.047-5.752-.167-8.62-.323z",
			"credit": "https://game-icons.net/lorc/originals/burning-dot.html"
		},
		"chick": {
			"path": "M419.1 21.18c-5.5 13.76-17.6 26.38-26.6 30.87l-29.9-13.97c-5.5 14.92-3.3 24.37 3.5 32.96-9.4 4.87-20.5 5.17-32.7 2.27-1.5 15.76 10.9 29.39 26.2 29.39 6-7.82 15.2-16.68 27.2-22.75 14.7-7.42 34.5-9.25 53.6 2.76 24.1-1.56 31.4-27.47 31.4-44.17-20.3 8.09-25.9 15.21-46.3 17.73 10.5-10.22 2.7-26.56-6.4-35.09zM68.76 89.2c26.79 16.4 52.74 27.7 58.64 50.1-35.13-11.3-66.12 7.7-87.19 41 27.57-9.3 45.01-15.7 74.59-12.9-26.81 11.7-54.33 25.1-52.48 47.1 19.05-11 23.5-17.7 52.68-17.6-28.21 16.9-43.69 28.1-37.58 66.5 9.55-16.1 33.08-31.6 50.28-34.4-24.8 30-29.27 48.6-18.8 78.9 8.9-13.6 18-37.1 36.1-47.2-9.2 20-5.5 49.6 3.2 63.6 9.4-17.4 16.4-35.8 35-50.2 20.4 33.1 35.7 67.3 85.7 94.6 7.8 8.4 12.4 18.4 13.2 32.4H337l17.5-32.2c52.1-20 81.4-51.1 96.5-87.5-8.3-4.5-13.4-12.4-16.9-19.9-13.3 13.2-20.8 25.8-29.7 41.4-8.7-12.5-15.5-27.6-17.1-41.3-11.7 9.7-18.7 19.6-27.4 31.7-6.7-14.4-12.2-31.2-12.4-44.9-19 6.5-24.4 14.7-37 29.2-6.3-21.3-12.7-47.2-6.6-62.6-75.9 3.8-67-92.4-98.4-118.06.6 14.46-8.2 40.16-13.1 42.06-20-46.54-89-49.79-123.64-49.8zm343.04 1.27c-6.2 0-11.8 1.88-17.4 4.65-11.3 6.58-20.6 15.78-27.2 26.88-1.8 14.9.6 29.7.1 44.5-.6 20.5-16.8 42-34.9 45.4-2.1.3-4.1.7-6.1 1-10.8 8-8.2 19.6-5.7 29.9 15.3-10.2 29.4-12.4 46.3-15.2-2.1 10.3-2.8 21.7-1.2 31.1 12.7-12.8 24-20.4 38.4-30.8-.7 13.4-1.2 28.7 1.8 40.3 11.2-15 20.9-23.3 35.1-33.5 4.4 9.1 10 25.8 15.8 30.5 2.6-8.5 4.4-17.3 5.8-26.2 1.9-13.9-3.9-27-10.4-40.3-12.9-.4-25.6-7.6-35.1-17.8-12.2-12.9-19.3-33.1-10.2-52.5l2.3-5c10.9.3 22.8.7 32.1 3.5 12.5 1.7 24.4 12 29.3 10.2-3.2-13.1-12.5-34.6-34.6-31.1 1.1-10.04-17.3-15.29-24.2-15.53zm-1.7 7.12c4.1 0 7.4 3.21 7.4 7.21s-3.3 7.2-7.4 7.2c-4.1 0-7.5-3.2-7.5-7.2s3.4-7.26 7.5-7.21zm10.4 43.31c-2.7 10.5 1.5 20.5 8.9 28.4 6.6 7 15.5 11.1 22.5 12.1-.2-16.6-1.9-26.9-5.5-31.9-6.7-7.6-17.2-8.1-25.9-8.6zM286.1 418.2l3.3 18.4c-10.3 2.4-21.2 3.7-35.9 1.8l-2.2 16.8c13.1 1.8 24.2 1.2 34.1-.4l-18.6 18.5.9 17.2 27.5-21.7 3.6 22 16.8-2.9-5.7-34.7 13.6-.8 8.5 37.2 16.6-3.7-3.7-16.1c18 8.6 36.4 10.4 51.8 12.7l-15.1-17.9c-20.3-3.1-23.1-3.9-41-17.3l-5.5-29.1h-17.2l3.2 17.3-14.4.8-3.3-18.1z",
			"credit": "https://game-icons.net/lorc/originals/burning-dot.html"
		}
	},
	"Code": "var center = { x: 0.5, y: 0.5 };\n\nvar CloseEnoughDistance = 0.01;\nvar MissRadius = 0.05;\nvar DodgeRadius = 0.15;\nvar SpellCastIntervalMilliseconds = 1000;\nvar SpellCastJitterMilliseconds = 500;\n\nvar TicksPerSecond = 60;\n\nvar DefaultReactionMilliseconds = 600;\nvar ReactionMillisecondsLookup = { // Change the reaction time on certain spells\n    retarget: 200,\n};\n\nvar alreadyChosenSpells = false;\nvar nextSpell = 0;\n\n// See ai.contracts.ts:\n// input is InputContract - contains information about the current state of the world\n// output is OutputContract - an action you want to take in response to the world \nfunction act(input) {\n    // Want the bot to do nothing? Uncomment the line below (remove the //):\n    // return null;\n\n    var state = input.state;\n    var heroId = input.heroId;\n    var hero = state.heroes[heroId];\n    var cooldowns = input.cooldowns;\n    var settings = input.settings;\n\n    var opponent = findOpponent(state.heroes, heroId);\n    if (!(hero && opponent)) {\n        // Either we're dead, or everyone else is, nothing to do\n        return null;\n    }\n    \n    var action = null;\n    if (state.started) {\n        action =\n            recovery(state, hero, cooldowns)\n            || dodge(state, hero, cooldowns)\n            || castSpell(state, hero, opponent, cooldowns, settings)\n            || focus(hero, opponent)\n            || chase(state, hero, cooldowns, opponent)\n            || move(state, hero);\n    } else {\n        action =\n            chooseSpells(settings)\n            || dodge(state, hero, cooldowns)\n            || move(state, hero);\n    }\n\n    if (action) {\n        // Give the bot a reaction time otherwise it is OP\n        var reactionMilliseconds = ReactionMillisecondsLookup[action.spellId] || DefaultReactionMilliseconds;\n        action.delayMilliseconds = reactionMilliseconds;\n        return action;\n    } else {\n        return null;\n    }\n}\n\nfunction chooseSpells(settings) {\n    if (alreadyChosenSpells) {\n        return null;\n    }\n    alreadyChosenSpells = true;\n\n    var spells = randomSpells(settings);\n\n    // Want to test a particular spell? Uncomment and edit the lines below\n     spells[\"a\"] = \"hunter\";\n     spells[\"q\"] = \"fireball\";\n     spells[\"w\"] = \"gravity\";\n\n    return { spells };\n}\n\nfunction randomSpells(settings) {\n\tvar keyBindings = {};\n\tvar allOptions = settings.Choices.Options;\n\tfor (var btn in allOptions) { // One of the buttons, e.g. Q or R\n        var options = allOptions[btn];\n\n        var spellIds = [];\n        for (var i = 0; i < options.length; ++i) {\n            var row = options[i];\n            for (var j = 0; j < row.length; ++j) {\n                var spellId = row[j];\n                spellIds.push(spellId);\n            }\n        }\n\n\t\tif (spellIds.length > 1) {\n\t\t\tkeyBindings[btn] = spellIds[Math.floor(Math.random() * spellIds.length)];\n\t\t}\n\t}\n\treturn keyBindings;\n}\n\nfunction findOpponent(heroes, myHeroId) {\n    var myHero = heroes[myHeroId];\n    if (!myHero) {\n        return null;\n    }\n\n    var choice = null;\n    var mostHealth = 0;\n    for (var heroId in heroes) {\n        var hero = heroes[heroId];\n\n        if (!hero.isEnemy) { continue; }\n\n        // Uncomment the line below to only target humans\n         if (hero.isBot) { continue; }\n\n        if (hero.health > mostHealth) {\n            // Target the enemy with the most health\n            mostHealth = hero.health;\n            choice = hero;\n        }\n    }\n    return choice;\n}\n\nfunction recovery(state, hero, cooldowns) {\n    if (hero.inside || state.radius <= 0) {\n        // No need to recover\n        return null;\n    }\n\n    var spellId = null;\n    if (cooldowns[\"teleport\"] === 0) {\n        spellId = \"teleport\";\n    } else if (cooldowns[\"thrust\"] === 0) {\n        spellId = \"thrust\";\n    } else if (cooldowns[\"swap\"] === 0) {\n        spellId = \"swap\";\n    } else if (cooldowns[\"voidRush\"] === 0) {\n        spellId = \"voidRush\";\n    } else if (cooldowns[\"vanish\"] === 0) {\n        spellId = \"vanish\";\n    } else {\n        spellId = \"move\";\n    }\n\n    if (spellId) {\n        return { spellId, target: center };\n    }\n    return null;\n}\n\nfunction deflect(state, hero, cooldowns, projectile) {\n    var target = vectorMidpoint(hero.pos, projectile.pos);\n    var spellId = null;\n    if (cooldowns[\"shield\"] === 0) {\n        spellId = \"shield\";\n    } else if (cooldowns[\"icewall\"] === 0) {\n        spellId = \"icewall\";\n    } else if (cooldowns[\"saber\"] === 0) {\n        spellId = \"saber\";\n    } else if (cooldowns[\"dualSaber\"] === 0) {\n        spellId = \"dualSaber\";\n    } else if (cooldowns[\"meteor\"] === 0) {\n        spellId = \"meteor\";\n    } else if (cooldowns[\"meteorite\"] === 0) {\n        spellId = \"meteorite\";\n    } else if (cooldowns[\"whirlwind\"] === 0) {\n        spellId = \"whirlwind\";\n    } else if (cooldowns[\"phaseOut\"] === 0) {\n        spellId = \"phaseOut\";\n    } else {\n        spellId = null;\n    }\n\n    if (spellId) {\n        return { spellId, target };\n    } else {\n        return null;\n    }\n}\n\nfunction castSpell(state, hero, opponent, cooldowns, settings) {\n    if (!readyForNextSpell(hero)) {\n        return null;\n    }\n\n    var candidates = [];\n    for (var spellId in cooldowns) {\n        var readyToCast = !cooldowns[spellId];\n        var spell = settings.Spells[spellId];\n\n        if (spell\n            && readyToCast\n            && validAttack(state, hero, opponent, spell)) {\n\n            candidates.push(spellId);\n        }\n    }\n\n    if (candidates.length > 0) {\n        var spellId = candidates[Math.floor(Math.random() * candidates.length)];\n        var action = { spellId, target: jitter(opponent.pos, MissRadius) };\n        if (action.spellId === spellId) {\n            updateNextSpellTime();\n        }\n        return action;\n    } else {\n        return null;\n    }\n}\n\nfunction validAttack(state, hero, opponent, spell) {\n    var opponentShielded = !!opponent.shieldTicksRemaining;\n\n    var distance = vectorDistance(hero.pos, opponent.pos);\n    if (spell.action === \"projectile\" || spell.action === \"spray\" || spell.action === \"retractor\" || spell.action === \"focus\" || spell.action === \"charge\") {\n        if (spell.projectile.swapWith) { // Swap doesn't work as an attack\n            return false;\n        }\n        if (opponentShielded && !spell.projectile.detonate) { // Detonate spells can penetrate shields, nothing else can\n            return false;\n        }\n        if (spell.id === \"whip\") {\n            // Just keep casting Electroshock even if out of range\n            return true;\n        }\n\n        var range = spell.projectile.speed * spell.projectile.maxTicks / TicksPerSecond + opponent.radius;\n        return distance <= range;\n    } else if (spell.action === \"scourge\") {\n        var range = spell.radius + opponent.radius;\n        return distance <= range;\n    } else if (spell.id === \"blaze\") {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction readyForNextSpell(hero) {\n    return (\n        Date.now() >= nextSpell // Don't cast too fast\n        || !!hero.link // If linked to something, cast as many spells as possible\n    );\n}\n\nfunction updateNextSpellTime() {\n    nextSpell = Date.now() + SpellCastIntervalMilliseconds + Math.floor((Math.random() < 0.5 ? -1 : 1) * Math.random() * SpellCastJitterMilliseconds);\n}\n\nfunction jitter(target, missRadius) {\n    var radius = Math.random() * missRadius;\n    var angle = Math.random() * 2 * Math.PI;\n    return {\n        x: target.x + radius * Math.cos(angle),\n        y: target.y + radius * Math.sin(angle),\n    };\n}\n\nfunction focus(hero, opponent) { // When using a spell (e.g. Acolyte Beam, Spirit Missile) - ensure we are focusing the enemy, otherwise we will miss\n    if (hero.casting) {\n        if (hero.casting.spellId === \"blast\" || hero.casting.spellId === \"retractor\" || hero.casting.spellId === \"rocket\") {\n            // Have to release or it won't fire\n            return { spellId: hero.casting.spellId, release: true, target: opponent.pos };\n        } else if (hero.casting.spellId === \"saber\" || hero.casting.spellId === \"dualSaber\") {\n            // Don't focus the lightsaber, just swish it around\n            return { spellId: \"retarget\", target: vectorPlus(hero.pos, vectorFromAngle(hero.heading + Math.PI / 2)) };\n        } else if (hero.casting.spellId === \"grapple\") {\n            // Throw away to the right (TODO: be smarter about this)\n            return { spellId: hero.casting.spellId, release: true, target: vectorPlus(hero.pos, vectorFromAngle(hero.heading + Math.PI / 2)) };\n        } else if (hero.casting.spellId === \"halo\") {\n            return { spellId: \"move\", target: opponent.pos };\n        } else {\n            return { spellId: \"retarget\", target: opponent.pos };\n        }\n    } else {\n        return null;\n    }\n}\n\nfunction chase(state, hero, cooldowns, opponent) {\n    if (\"whip\" in cooldowns) {\n        // Got to get within range when using Electroshock\n        var target = vectorMidpoint(hero.pos, opponent.pos);\n        return { spellId: \"move\", target };\n    } else {\n        return null;\n    }\n}\n\nfunction move(state, hero) {\n    var centroid = { x: 0, y: 0 };\n    var numOpponents = 0;\n    for (var heroId in state.heroes) {\n        if (heroId === hero.id) {\n            continue; // Ignore self\n        }\n\n        var opponent = state.heroes[heroId];\n        centroid.x += opponent.pos.x;\n        centroid.y += opponent.pos.y;\n\n        ++numOpponents;\n    }\n    centroid.x /= numOpponents;\n    centroid.y /= numOpponents;\n\n    if (!numOpponents) {\n        return;\n    }\n\n    var offset = vectorNegate(vectorDiff(centroid, center)); // Move to the opposite side of the arena\n    var targetDistance = state.radius * 0.33; // Closer to center than edge (for polygonal maps)\n    var target = vectorPlus(center, vectorRelengthen(offset, targetDistance));\n\n    var distanceToTarget = vectorDistance(hero.pos, target);\n    if (distanceToTarget <= CloseEnoughDistance) {\n        // Close enough - don't send any action so the game can sleep while waiting for players\n        return null;\n    }\n\n    return { spellId: \"move\", target };\n}\n\nfunction dodge(state, hero, cooldowns) {\n    for (var projectileId in state.projectiles) {\n        var projectile = state.projectiles[projectileId];\n        if (projectile.ownerId === hero.id) {\n            // This is my own projectile\n            continue;\n        }\n\n        if (projectile.spellId === \"halo\") {\n            // Halo is never coming for us, it orbits around its owner\n            continue;\n        }\n\n        var diff = vectorDiff(hero.pos, projectile.pos);\n        var distancePerTimeStep = vectorDot(projectile.velocity, vectorUnit(diff));\n        if (distancePerTimeStep <= 0) {\n            // Not coming towards us\n            continue;\n        }\n\n        var timeToCollision = vectorLength(diff) / distancePerTimeStep;\n        if (timeToCollision <= 0 || timeToCollision >= 30) {\n            // Not coming towards us or too far away\n            continue;\n        }\n\n        var collisionPoint = vectorPlus(projectile.pos, vectorMultiply(projectile.velocity, timeToCollision));\n        var distanceToCollision = vectorDistance(collisionPoint, hero.pos);\n        var dodgeRadius = Math.max(DodgeRadius, projectile.radius) + hero.radius;\n        if (distanceToCollision > dodgeRadius) {\n            // Won't hit us\n            continue;\n        }\n\n        var deflectAction = deflect(state, hero, cooldowns, projectile);\n        if (deflectAction) {\n            return deflectAction;\n        }\n\n        // Run away from collision point\n        var direction = vectorUnit(vectorNegate(vectorDiff(collisionPoint, hero.pos)));\n        var step = vectorMultiply(direction, dodgeRadius);\n        var target = vectorPlus(hero.pos, step);\n        return { spellId: \"move\", target };\n    }\n    return null;\n}\n\nfunction vectorDiff(to, from) {\n    return { x: to.x - from.x, y: to.y - from.y };\n}\n\nfunction vectorLength(vector) {\n    return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n}\n\nfunction vectorDistance(from, to) {\n    return vectorLength(vectorDiff(from, to));\n}\n\nfunction vectorUnit(vec) {\n    var length = vectorLength(vec);\n    return length === 0 ? vec : vectorMultiply(vec, 1 / length);\n}\n\nfunction vectorPlus(from, offset) {\n    return { x: from.x + offset.x, y: from.y + offset.y };\n}\n\nfunction vectorMultiply(vec, multiplier) {\n    return { x: vec.x * multiplier, y: vec.y * multiplier };\n}\n\nfunction vectorRelengthen(vec, length) {\n    return vectorMultiply(vectorUnit(vec), length);\n}\n\nfunction vectorNegate(vec) {\n    return vectorMultiply(vec, -1);\n}\n\nfunction vectorDot(a, b) {\n    return (a.x * b.x) + (a.y * b.y);\n}\n\nfunction vectorMidpoint(a, b) {\n    var diff = vectorDiff(b, a);\n    return vectorPlus(a, vectorMultiply(diff, 0.5));\n}\n\nfunction vectorFromAngle(angle) {\n\treturn { x: Math.cos(angle), y: Math.sin(angle) };\n}\n\n// See ai.contracts.ts: Must return a BotContract\nreturn { act };"
}