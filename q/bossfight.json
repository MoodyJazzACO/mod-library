{
	"Mod": {
		"name": "bossfight",
		"author": "q",
		"description": "Sun, 08 Mar 2020 16:54:42 GMT",
		"titleLeft": "Boss",
		"subtitleLeft": "dont",
		"subtitleRight": "die"
	},
	"Matchmaking": {
		"MaxBots": 1
	},
	"ObstacleTemplates": {
		"volcano": {
			"buffs": [
				{
					"type": "burn",
					"maxTicks": 15,
					"collideWith": 65535,
					"packet": {
						"damage": 0.5,
						"lifeSteal": 0,
						"noKnockback": true,
						"noHit": true,
						"isLava": true
					},
					"hitInterval": 5,
					"stack": "volcano",
					"maxStacks": 1,
					"render": {
						"color": "#ff0088",
						"alpha": 0.3,
						"ticks": 30,
						"emissionRadiusFactor": 1,
						"particleRadius": 0.005,
						"shine": 0.2,
						"glow": 0.2
					}
				}
			]
		},
		"outward": {
			"conveyor": {
				"radialSpeed": 1
			}
		}
	},
	"Choices": {
		"Keys": [
			{
				"btn": "p",
				"barSize": 0.001,
				"wheelSize": 0.001
			},
			{
				"btn": "o",
				"barSize": 0.0001,
				"wheelSize": 0.0001
			},
			{
				"btn": "a",
				"barSize": 1,
				"wheelSize": 1
			},
			{
				"btn": "1",
				"barSize": 0.0001,
				"wheelSize": 0.0001
			},
			{
				"btn": "2",
				"barSize": 0.0001,
				"wheelSize": 0.0001
			},
			{
				"btn": "3",
				"barSize": 0.0001,
				"wheelSize": 0.0001
			},
			{
				"btn": "4",
				"barSize": 0.0001,
				"wheelSize": 0.0001
			},
			{
				"btn": "5",
				"barSize": 0.0001,
				"wheelSize": 0.0001
			}
		],
		"Options": {
			"1": [
				[
					"none"
				],
				[
					"triangle",
					"pulse"
				]
			],
			"2": [
				[
					"none"
				],
				[
					"homing"
				]
			],
			"3": [
				[
					"none"
				],
				[
					"frag"
				]
			],
			"4": [
				[
					"none"
				],
				[
					"supernova"
				]
			],
			"5": [
				[
					"none"
				],
				[
					"superspray"
				]
			],
			"a": [
				[
					"thrust"
				],
				[
					"none"
				]
			],
			"q": {
				"$delete": true
			},
			"w": {
				"$delete": true
			},
			"e": {
				"$delete": true
			},
			"r": {
				"$delete": true
			},
			"f": {
				"$delete": true
			},
			"p": [
				[
					"teleport"
				]
			],
			"o": [
				[
					"none"
				],
				[
					"none"
				],
				[
					"armor"
				]
			]
		},
		"Special": {
			"k": "armor"
		}
	},
	"Spells": {
		"homing": {
			"action": "spray",
			"projectile": {
				"maxTicks": 240,
				"expireOn": 0,
				"behaviours": [
					{
						"type": "homing",
						"revolutionsPerSecond": 1,
						"maxTurnProportion": 0.05
					},
					{
						"type": "spawn",
						"trigger": {
							"afterTicks": 210
						},
						"projectile": {
							"density": 25,
							"radius": 0.003,
							"speed": 0.15,
							"maxTicks": 210,
							"damage": 16,
							"lifeSteal": 0.3,
							"expireOn": 1,
							"behaviours": [
								{
									"type": "homing",
									"revolutionsPerSecond": 1,
									"maxTurnProportion": 0.05
								}
							],
							"sound": "homing",
							"soundHit": "standard",
							"color": "#44ffcc",
							"renderers": [
								{
									"type": "bloom"
								},
								{
									"type": "projectile",
									"ticks": 30,
									"smoke": 0.05,
									"vanish": 0.75
								},
								{
									"type": "ray",
									"ticks": 10,
									"vanish": 0.75
								},
								{
									"type": "strike",
									"ticks": 30,
									"growth": 1,
									"flash": true,
									"numParticles": 5
								}
							]
						},
						"numProjectiles": 2,
						"spread": 0.8,
						"expire": true
					}
				],
				"renderers": [
					{
						"type": "bloom"
					},
					{
						"type": "projectile",
						"ticks": 30,
						"smoke": 0.05,
						"vanish": 0.75
					},
					{
						"type": "ray",
						"ticks": 10,
						"vanish": 0.75
					},
					{
						"type": "strike",
						"ticks": 30,
						"growth": 1,
						"flash": true,
						"numParticles": 5
					},
					{
						"type": "reticule",
						"color": "#44ffcc",
						"minRadius": 0.079,
						"remainingTicks": 30,
						"shrinkTicks": 30,
						"radius": 0.08
					}
				]
			},
			"numProjectilesPerTick": 1,
			"intervalTicks": 10,
			"lengthTicks": 30,
			"jitterRatio": 1
		},
		"backlash": {
			"cooldown": 30
		},
		"supernova": {
			"description": "Each bolt of Difire will add another stack of 2.5 damage per second to your enemy. There is no limit to the number of stacks, but you must hit them with Difire at least once every 4 seconds to keep the fire burning.",
			"action": "spray",
			"color": "#ff0088",
			"icon": "crossedSlashes",
			"cooldown": 90,
			"projectile": {
				"expireAfterCursorTicks": 30,
				"detonate": {
					"damage": 20,
					"radius": 0.08
				},
				"renderers": [
					{
						"type": "bloom",
						"radius": 0.03
					},
					{
						"type": "ray",
						"ticks": 30,
						"vanish": 1
					},
					{
						"type": "reticule",
						"color": "#ff9a00",
						"minRadius": 0.079,
						"remainingTicks": 30,
						"shrinkTicks": 30,
						"radius": 0.08
					}
				]
			},
			"name": "Difire",
			"sound": "triplet",
			"movementProportionWhileChannelling": 1,
			"numProjectilesPerTick": 5,
			"intervalTicks": 1,
			"lengthTicks": 1,
			"jitterRatio": 2
		},
		"teleport": {
			"effects": {
				"$delete": true
			},
			"range": 1,
			"cooldown": 200,
			"buffs": {
				"$delete": true
			}
		},
		"thrust": {
			"name": "Roll",
			"description": "Roll forward and dodge all bullets.",
			"effects": [
				{
					"icon": "fas fa-clock",
					"title": "Void recharge",
					"text": "Cools down 2x faster when in the void."
				}
			],
			"range": 0.1,
			"cooldown": 120,
			"debuff": false,
			"speed": 1,
			"buffs": [
				{
					"type": "mass",
					"radius": 0.001,
					"density": 1,
					"maxTicks": 16,
					"restrictCollideWith": 2,
					"render": {
						"color": "#fff",
						"heroColor": true,
						"ticks": 8,
						"emissionRadiusFactor": 0,
						"particleRadius": 0.018750000000000003,
						"glow": 0.2,
						"shine": 1,
						"bloom": 0.07,
						"decay": true
					}
				}
			]
		},
		"armor": {
			"buffs": [
				{
					"type": "mass",
					"passive": true,
					"radius": 0.0125,
					"density": 100
				},
				{
					"type": "armor",
					"passive": true,
					"proportion": -0.5
				}
			]
		},
		"none": {
			"id": "none",
			"name": "none",
			"description": "Passive ability. has a 100% chance to do 100% of your damage..",
			"effects": [
				{
					"icon": "fas fa-shield",
					"title": "Resistant",
					"text": "Reduce damage received by 15%. Applies to all forms of damage, including void damage."
				}
			],
			"passive": true,
			"untargeted": true,
			"cooldown": 1,
			"buffs": [
				{
					"type": "movement",
					"movementProportion": 1,
					"passive": true
				}
			],
			"icon": "wingedShield",
			"color": "#8800ff",
			"action": "buff"
		},
		"triangle": {
			"id": "triangle",
			"name": "Difire",
			"description": "Each bolt of Difire will add another stack of 2.5 damage per second to your enemy. There is no limit to the number of stacks, but you must hit them with Difire at least once every 4 seconds to keep the fire burning.",
			"action": "spray",
			"color": "#ff0088",
			"icon": "crossedSlashes",
			"sound": "triplet",
			"maxAngleDiffInRevs": 0.01,
			"cooldown": 120,
			"throttle": true,
			"movementProportionWhileChannelling": 1,
			"numProjectilesPerTick": 1,
			"intervalTicks": 10,
			"lengthTicks": 30,
			"jitterRatio": 0.2,
			"projectile": {
				"density": 7,
				"radius": 0.02,
				"speed": 0.75,
				"maxTicks": 90,
				"damage": 10,
				"lifeSteal": 0.3,
				"categories": 2,
				"expireAgainstObjects": 65534,
				"sound": "triplet",
				"soundHit": "standard",
				"color": "#ff0",
				"renderers": [
					{
						"type": "bloom",
						"radius": 0.02
					},
					{
						"type": "polygon",
						"color": "rgba(255, 255, 0, 1)",
						"numPoints": 3,
						"radiusMultiplier": 1,
						"revolutionInterval": 30,
						"ticks": 1,
						"shine": 0
					},
					{
						"type": "strike",
						"ticks": 8,
						"flash": true,
						"numParticles": 2
					}
				]
			}
		},
		"pulse": {
			"id": "pulse",
			"description": "Quick cooldown and packs a punch. Good old trusty fireball.",
			"action": "projectile",
			"color": "#f80",
			"icon": "thunderball",
			"maxAngleDiffInRevs": 0.01,
			"cooldown": 20,
			"throttle": true,
			"projectile": {
				"density": 25,
				"radius": 0.003,
				"speed": 0.6,
				"maxTicks": 90,
				"damage": 18,
				"lifeSteal": 0.3,
				"categories": 2,
				"sound": "fireball",
				"soundHit": "standard",
				"color": "#8b0000",
				"renderers": [
					{
						"type": "bloom",
						"radius": 0.045
					},
					{
						"type": "projectile",
						"ticks": 30,
						"smoke": 0.05
					},
					{
						"type": "ray",
						"ticks": 30
					},
					{
						"type": "strike",
						"ticks": 30,
						"flash": true,
						"numParticles": 5
					}
				]
			}
		},
		"frag": {
			"id": "frag",
			"description": "Send a little meteorite towards your enemies!",
			"action": "projectile",
			"color": "#ff0066",
			"icon": "fragmentedMeteor",
			"maxAngleDiffInRevs": 0.01,
			"cooldown": 240,
			"throttle": true,
			"projectile": {
				"density": 50,
				"square": true,
				"ccd": false,
				"attractable": false,
				"swappable": true,
				"linkable": true,
				"radius": 0.018,
				"speed": 0.8,
				"speedDecayPerTick": 0.5,
				"restitution": 0,
				"minTicks": 1,
				"maxTicks": 90,
				"hitInterval": 120,
				"damage": 20,
				"shieldTakesOwnership": false,
				"categories": 6,
				"collideWith": 65519,
				"expireOn": 0,
				"sound": "meteorite",
				"color": "#ff0066",
				"renderers": [
					{
						"type": "bloom",
						"radius": 0.04
					},
					{
						"type": "projectile",
						"ticks": 12,
						"shine": 0,
						"smoke": 0.5,
						"fade": "#333"
					},
					{
						"type": "strike",
						"ticks": 12,
						"flash": true,
						"growth": 0.1
					}
				],
				"behaviours": [
					{
						"type": "spawn",
						"trigger": {
							"atCursor": true
						},
						"projectile": {
							"density": 50,
							"square": true,
							"ccd": false,
							"attractable": false,
							"swappable": true,
							"linkable": true,
							"radius": 0.009,
							"speed": 1,
							"speedDecayPerTick": 0.5,
							"restitution": 0,
							"minTicks": 1,
							"maxTicks": 30,
							"hitInterval": 120,
							"damage": 10,
							"shieldTakesOwnership": false,
							"categories": 6,
							"collideWith": 65519,
							"expireOn": 0,
							"sound": "submeteorite",
							"color": "#ff0066",
							"renderers": [
								{
									"type": "bloom",
									"radius": 0.04
								},
								{
									"type": "projectile",
									"ticks": 12,
									"shine": 0,
									"smoke": 0.5,
									"fade": "#333"
								},
								{
									"type": "strike",
									"ticks": 12,
									"flash": true,
									"growth": 0.1
								}
							]
						},
						"numProjectiles": 8,
						"spread": 0.8,
						"expire": true
					}
				]
			}
		},
		"superspray": {
			"id": "superspray",
			"name": "Firesplatter",
			"description": "Shoot a stream of fire in a wide arc. Get closer to focus all your damage onto one target.",
			"action": "spray",
			"sound": "firespray",
			"color": "#ff0044",
			"icon": "bubblingBeam",
			"maxAngleDiffInRevs": 0.01,
			"cooldown": 1000,
			"throttle": true,
			"intervalTicks": 5,
			"lengthTicks": 240,
			"jitterRatio": 0.5,
			"projectile": {
				"density": 1,
				"ccd": false,
				"collideWith": 65535,
				"expireOn": 65519,
				"radius": 0.002,
				"speed": 1,
				"maxTicks": 30,
				"damage": 5,
				"lifeSteal": 0.3,
				"color": "#ff0044",
				"renderers": [
					{
						"type": "strike",
						"ticks": 30,
						"flash": true,
						"numParticles": 1
					}
				],
				"behaviours": [
					{
						"type": "spawn",
						"trigger": {
							"afterTicks": 1
						},
						"projectile": {
							"density": 1,
							"ccd": false,
							"collideWith": 65535,
							"expireOn": 65519,
							"radius": 0.002,
							"speed": 1,
							"maxTicks": 30,
							"damage": 5,
							"lifeSteal": 0.3,
							"color": "#ff0044",
							"renderers": [
								{
									"type": "bloom",
									"radius": 0.02
								},
								{
									"type": "projectile",
									"ticks": 30,
									"smoke": 0,
									"vanish": 1,
									"bloom": 0.01
								},
								{
									"type": "ray",
									"intermediatePoints": true,
									"ticks": 7,
									"vanish": 1
								},
								{
									"type": "strike",
									"ticks": 30,
									"flash": true,
									"numParticles": 1
								}
							]
						},
						"numProjectiles": 5,
						"spread": 0.3,
						"expire": true
					}
				]
			}
		}
	},
	"Layouts": {
		"circle": {
			"obstacles": [
				{
					"type": "volcano",
					"layoutRadius": 0,
					"extent": 0.02,
					"numObstacles": 1,
					"layoutAngleOffsetInRevs": 0.08333333,
					"numPoints": 6
				},
				{
					"type": "outward",
					"numObstacles": 6,
					"layoutRadius": 0.05,
					"layoutAngleOffsetInRevs": 0,
					"numPoints": 6,
					"extent": 0.003,
					"orientationAngleOffsetInRevs": 0,
					"angularWidthInRevs": 0.166667
				}
			]
		},
		"cold": {
			"$delete": true
		},
		"octogon": {
			"$delete": true
		},
		"return": {
			"$delete": true
		},
		"double": {
			"$delete": true
		},
		"ring": {
			"$delete": true
		},
		"exit": {
			"$delete": true
		},
		"heal": {
			"$delete": true
		},
		"snowflake": {
			"$delete": true
		},
		"inside5": {
			"$delete": true
		},
		"single": {
			"$delete": true
		},
		"pepper": {
			"$delete": true
		},
		"mirrors": {
			"$delete": true
		},
		"innerStar": {
			"$delete": true
		},
		"mirrorhenge": {
			"$delete": true
		},
		"spiral": {
			"$delete": true
		},
		"triplet": {
			"$delete": true
		},
		"square": {
			"$delete": true
		},
		"surrounded": {
			"$delete": true
		},
		"tripletSwirl": {
			"$delete": true
		}
	},
	"Code": "var center = { x: 0.5, y: 0.5 };\n\nvar CloseEnoughDistance = 0.05;\nvar CloseEnoughRadians = 0.1 * Math.PI;\nvar MissRadius = 0.05;\nvar DodgeRadius = 0.15;\nvar SpellCastIntervalMilliseconds = 0;\nvar SpellCastJitterMilliseconds = 0;\n\nvar TicksPerSecond = 60;\n\nvar DefaultReactionMilliseconds = 0;\nvar ReactionMillisecondsLookup = { // Change the reaction time on certain spells\n    retarget: 0,\n};\n\nvar alreadyChosenSpells = false;\nvar nextSpell = 0;\n\n// See ai.contracts.ts:\n// input is InputContract - contains information about the current state of the world\n// output is OutputContract - an action you want to take in response to the world \nfunction act(input) {\n    // Want the bot to do nothing? Uncomment the line below (remove the //):\n    // return null;\n\n    var state = input.state;\n    var heroId = input.heroId;\n    var hero = state.heroes[heroId];\n    var cooldowns = input.cooldowns;\n    var settings = input.settings;\n\n    var opponent = findOpponent(state.heroes, heroId);\n    if (!(hero && opponent)) {\n        // Either we're dead, or everyone else is, nothing to do\n        return null;\n    }\n    \n    var action = null;\n    if (state.started) {\n        action =\n            recovery(state, hero, cooldowns)\n            || castSpell(state, hero, opponent, cooldowns, settings)\n            || focus(hero, opponent)\n            || face(state, hero, opponent)\n    } else {\n        action =\n            chooseSpells(settings)\n            || recovery(state, hero, cooldowns)\n    }\n\n    if (action) {\n        // Give the bot a reaction time otherwise it is OP\n        var reactionMilliseconds = ReactionMillisecondsLookup[action.spellId] || DefaultReactionMilliseconds;\n        action.delayMilliseconds = reactionMilliseconds;\n        return action;\n    } else {\n        return null;\n    }\n}\n\nfunction chooseSpells(settings) {\n    if (alreadyChosenSpells) {\n        return null;\n    }\n    alreadyChosenSpells = true;\n\n    var spells = randomSpells(settings);\n\n    // Want to test a particular spell? Uncomment and edit the lines below\n    spells[\"o\"] = \"armor\";\n\n    return { spells };\n}\n\nfunction randomSpells(settings) {\n\tvar keyBindings = {};\n\tvar allOptions = settings.Choices.Options;\n\tfor (var btn in allOptions) { // One of the buttons, e.g. Q or R\n        var options = allOptions[btn];\n\n        var spellIds = [];\n        for (var i = 0; i < options.length; ++i) {\n            var row = options[i];\n            for (var j = 0; j < row.length; ++j) {\n                var spellId = row[j];\n                spellIds.push(spellId);\n            }\n        }\n\n\t\tif (spellIds.length > 1) {\n\t\t\tkeyBindings[btn] = spellIds[Math.floor(Math.random() * spellIds.length)];\n\t\t}\n    if (keyBindings[btn] == \"none\") {\n      keyBindings[btn] = spellIds[Math.floor(Math.random() * spellIds.length)];\n    }\n    if (keyBindings[btn] == \"none\") {\n      keyBindings[btn] = spellIds[Math.floor(Math.random() * spellIds.length)];\n    }\n    if (keyBindings[btn] == \"none\") {\n      keyBindings[btn] = spellIds[Math.floor(Math.random() * spellIds.length)];\n    }\n\t}\n\treturn keyBindings;\n}\n\nfunction findOpponent(heroes, myHeroId) {\n    var myHero = heroes[myHeroId];\n    if (!myHero) {\n        return null;\n    }\n\n    var choice = null;\n    var mostHealth = 0;\n    for (var heroId in heroes) {\n        var hero = heroes[heroId];\n\n        if (!hero.isEnemy) { continue; }\n\n        // Uncomment the line below to only target humans\n        // if (hero.isBot) { continue; }\n\n        if (hero.health > mostHealth) {\n            // Target the enemy with the most health\n            mostHealth = hero.health;\n            choice = hero;\n        }\n    }\n    return choice;\n}\n\nfunction recovery(state, hero, cooldowns) {\n    var spellId = null;\n    if (cooldowns[\"teleport\"] === 0) {\n        spellId = \"teleport\";\n    }\n\n    if (spellId) {\n        return { spellId, target: center };\n    }\n    return null;\n}\n\nfunction deflect(state, hero, cooldowns, projectile) {\n    var target = vectorMidpoint(hero.pos, projectile.pos);\n    var spellId = null;\n    if (cooldowns[\"shield\"] === 0) {\n        spellId = \"shield\";\n    } else if (cooldowns[\"icewall\"] === 0) {\n        spellId = \"icewall\";\n    } else if (cooldowns[\"saber\"] === 0) {\n        spellId = \"saber\";\n    } else if (cooldowns[\"dualSaber\"] === 0) {\n        spellId = \"dualSaber\";\n    } else if (cooldowns[\"meteor\"] === 0) {\n        spellId = \"meteor\";\n    } else if (cooldowns[\"meteorite\"] === 0) {\n        spellId = \"meteorite\";\n    } else if (cooldowns[\"whirlwind\"] === 0) {\n        spellId = \"whirlwind\";\n    } else if (cooldowns[\"phaseOut\"] === 0) {\n        spellId = \"phaseOut\";\n    } else {\n        spellId = null;\n    }\n\n    if (spellId) {\n        return { spellId, target };\n    } else {\n        return null;\n    }\n}\n\nfunction castSpell(state, hero, opponent, cooldowns, settings) {\n    if (!readyForNextSpell(hero)) {\n        return null;\n    }\n\n    var candidates = [];\n    for (var spellId in cooldowns) {\n        var readyToCast = !cooldowns[spellId];\n        var spell = settings.Spells[spellId];\n\n        if (spell\n            && readyToCast\n            && validAttack(state, hero, opponent, spell)) {\n\n            candidates.push(spellId);\n        }\n    }\n\n    if (candidates.length > 0) {\n        var spellId = candidates[Math.floor(Math.random() * candidates.length)];\n        var action = { spellId, target: jitter(opponent.pos, MissRadius) };\n        if (action.spellId === spellId) {\n            updateNextSpellTime();\n        }\n        return action;\n    } else {\n        return null;\n    }\n}\n\nfunction validAttack(state, hero, opponent, spell) {\n    var opponentShielded = !!opponent.shieldTicksRemaining;\n\n    var distance = vectorDistance(hero.pos, opponent.pos);\n    if (spell.action === \"projectile\" || spell.action === \"spray\" || spell.action === \"retractor\" || spell.action === \"focus\" || spell.action === \"charge\") {\n        if (spell.projectile.swapWith) { // Swap doesn't work as an attack\n            return false;\n        }\n        if (opponentShielded && !spell.projectile.detonate) { // Detonate spells can penetrate shields, nothing else can\n            return false;\n        }\n        if (spell.id === \"whip\") {\n            // Just keep casting Electroshock even if out of range\n            return true;\n        }\n\n        var range = spell.projectile.speed * spell.projectile.maxTicks / TicksPerSecond + opponent.radius;\n        return distance <= range;\n    } else if (spell.action === \"scourge\") {\n        var range = spell.radius + opponent.radius;\n        return distance <= range;\n    } else if (spell.id === \"blaze\") {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction readyForNextSpell(hero) {\n    return (\n        Date.now() >= nextSpell // Don't cast too fast\n        || !!hero.link // If linked to something, cast as many spells as possible\n    );\n}\n\nfunction updateNextSpellTime() {\n    nextSpell = Date.now() + SpellCastIntervalMilliseconds + Math.floor((Math.random() < 0.5 ? -1 : 1) * Math.random() * SpellCastJitterMilliseconds);\n}\n\nfunction jitter(target, missRadius) {\n    var radius = Math.random() * missRadius;\n    var angle = Math.random() * 2 * Math.PI;\n    return {\n        x: target.x + radius * Math.cos(angle),\n        y: target.y + radius * Math.sin(angle),\n    };\n}\n\nfunction focus(hero, opponent) { // When using a spell (e.g. Acolyte Beam, Spirit Missile) - ensure we are focusing the enemy, otherwise we will miss\n    if (hero.casting) {\n        if (hero.casting.spellId === \"blast\" || hero.casting.spellId === \"retractor\" || hero.casting.spellId === \"rocket\") {\n            // Have to release or it won't fire\n            return { spellId: hero.casting.spellId, release: true, target: opponent.pos };\n        } else if (hero.casting.spellId === \"saber\" || hero.casting.spellId === \"dualSaber\") {\n            // Don't focus the lightsaber, just swish it around\n            return { spellId: \"retarget\", target: vectorPlus(hero.pos, vectorFromAngle(hero.heading + Math.PI / 2)) };\n        } else if (hero.casting.spellId === \"grapple\") {\n            // Throw away to the right (TODO: be smarter about this)\n            return { spellId: hero.casting.spellId, release: true, target: vectorPlus(hero.pos, vectorFromAngle(hero.heading + Math.PI / 2)) };\n        } else if (hero.casting.spellId === \"halo\") {\n            return { spellId: \"move\", target: opponent.pos };\n        } else {\n            return { spellId: \"retarget\", target: opponent.pos };\n        }\n    } else {\n        return null;\n    }\n}\n\nfunction chase(state, hero, cooldowns, opponent) {\n    if (\"whip\" in cooldowns) {\n        // Got to get within range when using Electroshock\n        var target = vectorMidpoint(hero.pos, opponent.pos);\n        return { spellId: \"move\", target };\n    } else {\n        return null;\n    }\n}\n\nfunction move(state, hero) {\n    var centroid = { x: 0, y: 0 };\n    var numOpponents = 0;\n    for (var heroId in state.heroes) {\n        if (heroId === hero.id) {\n            continue; // Ignore self\n        }\n\n        var opponent = state.heroes[heroId];\n        centroid.x += opponent.pos.x;\n        centroid.y += opponent.pos.y;\n\n        ++numOpponents;\n    }\n    centroid.x /= numOpponents;\n    centroid.y /= numOpponents;\n\n    if (!numOpponents) {\n        return;\n    }\n\n    var offset = vectorNegate(vectorDiff(centroid, center)); // Move to the opposite side of the arena\n    var targetDistance = state.radius * 0.33; // Closer to center than edge (for polygonal maps)\n    var target = vectorPlus(center, vectorRelengthen(offset, targetDistance));\n\n    var distanceToTarget = vectorDistance(hero.pos, target);\n    if (distanceToTarget <= CloseEnoughDistance) {\n        // Close enough - don't send any action so the game can sleep while waiting for players\n        return null;\n    }\n\n    return { spellId: \"move\", target };\n}\n\nfunction face(state, hero, opponent) {\n    var target = opponent.pos;\n    var targetAngle = vectorAngle(vectorDiff(opponent.pos, hero.pos));\n    var angleDelta = vectorAngleDelta(hero.heading, targetAngle);\n    if (Math.abs(angleDelta) <= CloseEnoughRadians) {\n        return null;\n    }\n\n    return { spellId: \"retarget\", target };\n}\n\nfunction dodge(state, hero, cooldowns) {\n    for (var projectileId in state.projectiles) {\n        var projectile = state.projectiles[projectileId];\n        if (projectile.ownerId === hero.id) {\n            // This is my own projectile\n            continue;\n        }\n\n        if (projectile.spellId === \"halo\") {\n            // Halo is never coming for us, it orbits around its owner\n            continue;\n        }\n\n        var diff = vectorDiff(hero.pos, projectile.pos);\n        var distancePerTimeStep = vectorDot(projectile.velocity, vectorUnit(diff));\n        if (distancePerTimeStep <= 0) {\n            // Not coming towards us\n            continue;\n        }\n\n        var timeToCollision = vectorLength(diff) / distancePerTimeStep;\n        if (timeToCollision <= 0 || timeToCollision >= 30) {\n            // Not coming towards us or too far away\n            continue;\n        }\n\n        var collisionPoint = vectorPlus(projectile.pos, vectorMultiply(projectile.velocity, timeToCollision));\n        var distanceToCollision = vectorDistance(collisionPoint, hero.pos);\n        var dodgeRadius = Math.max(DodgeRadius, projectile.radius) + hero.radius;\n        if (distanceToCollision > dodgeRadius) {\n            // Won't hit us\n            continue;\n        }\n\n        var deflectAction = deflect(state, hero, cooldowns, projectile);\n        if (deflectAction) {\n            return deflectAction;\n        }\n\n        // Run away from collision point\n        var direction = vectorUnit(vectorNegate(vectorDiff(collisionPoint, hero.pos)));\n        var step = vectorMultiply(direction, dodgeRadius);\n        var target = vectorPlus(hero.pos, step);\n        return { spellId: \"move\", target };\n    }\n    return null;\n}\n\nfunction vectorDiff(to, from) {\n    return { x: to.x - from.x, y: to.y - from.y };\n}\n\nfunction vectorLength(vector) {\n    return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n}\n\nfunction vectorDistance(from, to) {\n    return vectorLength(vectorDiff(from, to));\n}\n\nfunction vectorUnit(vec) {\n    var length = vectorLength(vec);\n    return length === 0 ? vec : vectorMultiply(vec, 1 / length);\n}\n\nfunction vectorPlus(from, offset) {\n    return { x: from.x + offset.x, y: from.y + offset.y };\n}\n\nfunction vectorMultiply(vec, multiplier) {\n    return { x: vec.x * multiplier, y: vec.y * multiplier };\n}\n\nfunction vectorRelengthen(vec, length) {\n    return vectorMultiply(vectorUnit(vec), length);\n}\n\nfunction vectorNegate(vec) {\n    return vectorMultiply(vec, -1);\n}\n\nfunction vectorDot(a, b) {\n    return (a.x * b.x) + (a.y * b.y);\n}\n\nfunction vectorMidpoint(a, b) {\n    var diff = vectorDiff(b, a);\n    return vectorPlus(a, vectorMultiply(diff, 0.5));\n}\n\nfunction vectorFromAngle(angle) {\n\treturn { x: Math.cos(angle), y: Math.sin(angle) };\n}\n\nfunction vectorAngle(vec) {\n    return Math.atan2(vec.y, vec.x);\n}\n\nfunction vectorAngleDelta(currentAngle, targetAngle) {\n\tvar delta = targetAngle - currentAngle;\n\twhile (delta > Math.PI) {\n\t\tdelta -= 2 * Math.PI;\n\t}\n\twhile (delta < -Math.PI) {\n\t\tdelta += 2 * Math.PI;\n\t}\n\treturn delta;\n}\n\n// See ai.contracts.ts: Must return a BotContract\nreturn { act };"
}