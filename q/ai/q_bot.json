{
	"Mod": {
		"name": "q bot",
		"author": "q",
		"description": "Sun, 02 Feb 2020 18:10:43 GMT",
		"titleLeft": "q's",
		"titleRight": "Bot!",
		"subtitleLeft": "unskilled",
		"subtitleRight": "arena"
	},
	"Matchmaking": {
		"MaxBots": 1,
		"PvE": true
	},
	"World": {
		"BotName": "QBot"
	},
	"Code": "const center = { x: 0.5, y: 0.5 };\nlet playstate;\nlet opponent;\nlet alreadyChosenSpells = false;\n\nconst act = input => {\n  let action = choseSpells() || {\n    delayMilliseconds: 0,\n    spellId: 'move',\n    target: {x: 1, y: 1}\n  };\n  /*\n  let opponent = findOpponent(state.heroes, heroId);\n  let spellId;\n  let target;\n  switch (playstate) {\n    case 'neutral':\n      // when nobody is in the void™\n      spellId = 'move';\n      target = center;\n      action = { spellId, target };\n      break;\n    case 'advantage':\n      // when bot's opponent is in the void™ \n      spellId = 'move';\n      target = center;\n      action = { spellId, target };\n      break;\n    case 'disadvantage':\n      // when bot is in the void™ \n      spellId = 'move';\n      target = center;\n      action = { spellId, target };\n      break;\n    case 'pregame':\n      // before game starts\n      if (!alreadyChosenSpells) action = spells;\n      break;\n    default: \n      // when playstate is undefined, somehow\n      action = null;\n      changePlaystate(input, opponent);\n  }\n  */\n  return action;\n}\n/*\nconst changePlaystate = (input, opponent) => {\n  let state = input.state;\n  let heroId = input.heroId;\n  let hero = state.heroes[heroId];\n  let cooldowns = input.cooldowns;\n  let settings = input.settings;\n  if (!state.started) playstate = 'pregame'\n  else if(hero.inside || opponent.inside) playstate = 'neutral'\n  else if(!hero.inside) playstate = 'disadvantage'\n  else if(!opponent.inside) playstate = 'advantage'\n}\n*/\n// bot stuff\n/*\nconst findOpponent = (heroes, myHeroId) => {\n    var myHero = heroes[myHeroId];\n    if (!myHero) {\n        return null;\n    }\n\n    var choice = null;\n    var mostHealth = 0;\n    for (var heroId in heroes) {\n        var hero = heroes[heroId];\n\n        if (!hero.isEnemy) { continue; }\n\n        if (hero.health > mostHealth) {\n            // Target the enemy with the most health\n            mostHealth = hero.health;\n            choice = hero;\n        }\n    }\n    return choice;\n}\n*/\nconst chooseSpells = () => {\n    if (alreadyChosenSpells) {\n        return null;\n    }\n    alreadyChosenSpells = true;\n    const spells = {\n      a: 'thrust',\n      q: 'difire',\n      w: 'repulsor',\n      e: 'saber',\n      r: 'repeater',\n      f: 'bump',\n    }\n    return { spells };\n}\n\n// math stuff\nconst distance = (a, b) => {\n  var foo = a.x - b.x;\n  var bar = a.y - b.y;\n  return Math.sqrt( foo*foo + bar*bar );\n}\n\nreturn { act };"
}
